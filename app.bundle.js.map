{"version":3,"sources":["webpack:///./src/common/localStorage/calculatorState.js","webpack:///./src/common/actions/calculator.js","webpack:///./src/common/calculations/toPercent.js","webpack:///./src/common/calculations/getTotalDailyAmount.js","webpack:///./src/common/form/percentageDefaultOptions.js","webpack:///./src/common/form/unitOptions.js","webpack:///./src/common/calculations/getMuscleAmount.js","webpack:///./src/common/calculations/getBoneAmount.js","webpack:///./src/common/calculations/getAmountsByPercents.js","webpack:///./src/common/calculations/getAmounts.js","webpack:///./src/common/reducers/calculator.js","webpack:///./src/common/reducers/utils/createMappedReducer.js","webpack:///./src/common/reducers/index.js","webpack:///./src/common/calculations/round.js","webpack:///./src/common/components/calculator/Header2.js","webpack:///./src/common/components/calculator/Section.js","webpack:///./src/common/components/calculator/AmountsTable.js","webpack:///./src/common/components/calculator/BulkHelper.js","webpack:///./src/common/configureStore.js","webpack:///./src/common/components/calculator/WhatToFeed.js","webpack:///./src/common/form/rawMeatyBoneOptions.js","webpack:///./src/common/components/calculator/RawMeatyBone.js","webpack:///./src/common/components/calculator/BasicOptions.js","webpack:///./src/common/components/calculator/PercentageOptions.js","webpack:///./src/common/components/calculator/DogMealCalculator.js","webpack:///./src/common/theme.js","webpack:///./src/common/components/App.js","webpack:///./src/client/index.js"],"names":["saveState","state","serializedState","JSON","stringify","localStorage","setItem","updateOptions","weight","maintenance","unitName","type","setAge","isPuppy","isAdult","toPercent","number","getTotalDailyAmount","maintenancePercentage","unitAmount","weightByUnit","totalAmountInOunces","percentageDefaults","barf","adult","muscle","bone","other","liver","organ","veggie","seed","fruit","puppy","pmr","fibre","name","value","key","unitData","english","lg","sm","perUnit","metric","getMuscleAmount","total","others","values","reduce","a","b","getMusclePercentage","bonePercentage","otherPercentages","getBoneAmount","amount","bonePercent","rmbPercent","totalAmount","percentages","mapValues","getAmounts","totalDailyAmount","updatedBoneAmount","updatedOtherAmounts","getAmountsByPercents","otherAmounts","boneAmount","muscleAmount","initialState","getItem","parse","err","loadState","unitDetails","mealType","age","musclePercentage","getPresetPercentages","updatedState","checkPresetAgeSettings","some","createMappedReducer","handlers","action","handler","updatedUnitDetails","updatedDailyAmount","updatedBonePercentage","updatedMusclePercentage","updatedProperty","updatedValue","updatedOtherPercentages","console","log","combineReducers","calculator","round","to","lodashRound","useStyles","makeStyles","theme","h2","fontWeight","margin","spacing","Header2","children","classes","className","propTypes","PropTypes","string","isRequired","section","backgroundColor","padding","marginTop","Section","props","firstRow","table","borderBottom","paddingLeft","paddingRight","paddingBottom","paddingTop","capitalize","textTransform","AmountsTable","title","createCellContent","smallUnitAmount","getCellContentCreator","Table","TableBody","TableRow","TableCell","align","map","object","numericLarge","width","bulkTable","marginBottom","BulkHelper","setShowBulkTable","shouldShowBulkTable","useState","numDays","setNumDays","totalAmountUpdated","setTotalUpdatedAmount","boneAmountUpdated","setBoneUpdatedAmount","otherAmountsUpdated","setOtherUpdatedAmount","muscleAmountUpdated","setMuscleUpdatedAmount","useEffect","updatedOther","TextField","id","label","onChange","e","Number","target","InputProps","endAdornment","InputAdornment","position","helperText","Button","size","variant","color","onClick","bool","func","preloadedState","middleware","WhatToFeed","settings","useSelector","Fragment","formControl","rmbOption","rmbCustom","RawMeatyBone","dispatch","useDispatch","customRMB","setCustomRMB","rmbOptions","setRmbOption","updateRMB","FormControl","InputLabel","htmlFor","NativeSelect","optionValue","defaultValue","option","disabled","BasicOptions","roundedDailyAmount","setRoundedDailyAmount","unitOptions","inputProps","min","max","step","numericSmall","radioWrapper","radio","radioLabel","fontSize","marginRight","formLabel","buttonWrapper","PercentageOptions","component","FormLabel","root","RadioGroup","aria-label","setMealType","row","FormControlLabel","control","Radio","DogMealCalculator","Grid","container","item","xs","md","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","h1","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","App","ThemeProvider","CssBaseline","Container","fixed","store","thunkMiddleware","createStore","rootReducer","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"app.bundle.js","sourcesContent":["export function loadState() {\n  try {\n    const serializedState = localStorage.getItem('dogfood');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport function saveState(state) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('dogfood', serializedState);\n  } catch {\n    // ignore write errors\n  }\n}\n","export const UPDATE_OPTIONS = 'UPDATE_OPTIONS';\nexport const UPDATE_BONE_PERCENTAGE = 'UPDATE_BONE_PERCENTAGE';\nexport const UPDATE_OTHER_PERCENTAGE = 'UPDATE_OTHER_PERCENTAGE';\nexport const RESET_PERCENTAGE_DEFAULTS = 'RESET_PERCENTAGE_DEFAULTS';\nexport const UPDATE_RMB_PERCENT = 'UPDATE_RMB_PERCENT';\nexport const SET_MEAL_TYPE = 'SET_MEAL_TYPE';\nexport const SET_AGE = 'SET_AGE';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// BasicOptions\nexport function updateOptions(weight, maintenance, unitName) {\n  return {\n    type: UPDATE_OPTIONS,\n    weight,\n    maintenance,\n    unitName,\n  };\n}\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PercentageOptions\nexport function setMealType(mealType) {\n  return {\n    type: SET_MEAL_TYPE,\n    mealType,\n  };\n}\n\nexport function setAge({ isPuppy, isAdult }) {\n  return {\n    type: SET_AGE,\n    isPuppy,\n    isAdult,\n  };\n}\n\nexport function updateBonePercentage (updatedBonePercentage)  {\n  return {\n    type: UPDATE_BONE_PERCENTAGE,\n    updatedBonePercentage,\n  };\n}\nexport function updateOtherPercentage(updatedValue, propertyName)  {\n  return {\n    type: UPDATE_OTHER_PERCENTAGE,\n    updatedProperty: propertyName,\n    updatedValue,\n  };\n}\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// RawMeatyBone\nexport function updateRMB(rmbPercent) {\n  return {\n    type: UPDATE_RMB_PERCENT,\n    rmbPercent,\n  };\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","const toPercent = number => {\n  return number / 100;\n};\n\nexport default toPercent;","import toPercent from './toPercent';\n\nconst getTotalDailyAmount = (weight, maintenancePercentage, unitAmount = 16) => {\n  const weightByUnit = weight * unitAmount;\n  const totalAmountInOunces = weightByUnit * toPercent(maintenancePercentage);\n  return totalAmountInOunces;\n};\n\nexport default getTotalDailyAmount;","export const percentageDefaults = {\n  barf: {\n    adult: {\n      muscle: 70,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        veggie: 7,\n        seed: 2,\n        fruit: 1,\n      },\n    },\n    puppy: {\n      muscle: 58,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        veggie: 7,\n        seed: 3,\n        fruit: 1,\n      },\n    },\n  },\n  pmr: {\n    adult: {\n      muscle: 78,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        fibre: 2,\n      },\n    },\n    puppy: {\n      muscle: 67,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        fibre: 2,\n      },\n    },\n  },\n};\n","export default [\n  { name: 'lb / ounce', value: 'english', key: 'english' },\n  { name: 'kg / gram', value: 'metric', key: 'metric' },\n];\n\nexport const unitData = {\n  english: {\n    name: 'english',\n    lg: 'lb',\n    sm: 'oz',\n    perUnit: 16,\n  },\n  metric: {\n    name: 'metric',\n    lg: 'kg',\n    sm: 'g',\n    perUnit: 1000,\n  }\n};\n","import values from 'lodash/values';\n\nconst getMuscleAmount = (total, bone, others) => {\n  const sum = bone + values(others).reduce((a, b) => (a + b), 0);\n  return total - sum;\n};\n\nexport default getMuscleAmount;\n\nexport const getMusclePercentage = (bonePercentage, otherPercentages) => \n  getMuscleAmount(100, bonePercentage, otherPercentages);\n","import toPercent from './toPercent';\n\nconst getBoneAmount = (amount, bonePercent, rmbPercent) => {\n  const newBoneAmount = (amount * toPercent(bonePercent)) / toPercent(rmbPercent);  \n  return newBoneAmount;\n};\n\nexport default getBoneAmount;","import mapValues from 'lodash/mapValues';\nimport toPercent from './toPercent';\n\nconst getAmountByPercent = (amount, percentAmount) => {\n  return amount * toPercent(percentAmount);\n};\n\nexport default (totalAmount, percentages) => \n  mapValues(percentages, value => getAmountByPercent(totalAmount, value));\n\n","import getMuscleAmount from './getMuscleAmount';\nimport getBoneAmount from './getBoneAmount';\nimport getAmountsByPercents from './getAmountsByPercents';\n\nconst getAmounts = (totalDailyAmount, bonePercentage, rmbPercent, otherPercentages) => {\n  const updatedBoneAmount = getBoneAmount(totalDailyAmount, bonePercentage, rmbPercent);\n  const updatedOtherAmounts = getAmountsByPercents(totalDailyAmount, otherPercentages); \n  const updatedMuscleAmount = getMuscleAmount(totalDailyAmount, updatedBoneAmount, updatedOtherAmounts);\n\n  return {\n    otherAmounts: updatedOtherAmounts,\n    boneAmount: updatedBoneAmount,\n    muscleAmount: updatedMuscleAmount,\n  };\n};\n\nexport default getAmounts;","import some from 'lodash/some';\nimport { loadState, saveState } from '../localStorage/calculatorState';\n\nimport {\n  UPDATE_OPTIONS,\n  UPDATE_BONE_PERCENTAGE,\n  UPDATE_OTHER_PERCENTAGE,\n  UPDATE_RMB_PERCENT,\n  SET_AGE,\n  SET_MEAL_TYPE,\n} from '../actions/calculator';\n\nimport createMappedReducer from './utils/createMappedReducer';\nimport getTotalDailyAmount from '../calculations/getTotalDailyAmount';\nimport { percentageDefaults } from '../form/percentageDefaultOptions';\nimport { unitData } from '../form/unitOptions';\nimport { getMusclePercentage } from '../calculations/getMuscleAmount';\nimport getAmounts from '../calculations/getAmounts';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// INITIAL STATE\nconst initialRMB = 44;\nconst weight = 68;\nconst maintenance = 3.0;\nconst initialUnit = 'english';\nconst totalDailyAmount = getTotalDailyAmount(weight, maintenance, initialUnit.perUnit);\nconst { muscle, bone, other } = percentageDefaults['barf']['adult'];\n\nexport const initialState = loadState() || {\n  unitDetails: unitData[initialUnit],\n  isAdult: true,\n  isPuppy: false,\n  mealType: 'barf',\n  age: 'adult',\n  weight,\n  maintenance,\n  totalDailyAmount,\n  rmbPercent: initialRMB,\n  musclePercentage: muscle,\n  bonePercentage: bone,\n  otherPercentages: other,\n  ...getAmounts(totalDailyAmount, bone, initialRMB, other),\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// BasicOptions\nconst updateOptions = (state, action) => {\n  const { otherPercentages, bonePercentage, rmbPercent, unitDetails } = state;\n  const { weight, maintenance, unitName } = action;\n\n  const updatedUnitDetails = unitName ? unitData[unitName] : { ...unitDetails };\n  const updatedDailyAmount = getTotalDailyAmount(weight, maintenance, updatedUnitDetails.perUnit);\n\n  const updatedState = {\n    ...state,\n    weight,\n    maintenance,\n    unitDetails: updatedUnitDetails,\n    totalDailyAmount: updatedDailyAmount,\n    ...getAmounts(updatedDailyAmount, bonePercentage, rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PercentageOptions\nconst getPresetPercentages = (state, mealType, age) => {\n  const { totalDailyAmount, rmbPercent } = state;\n  const { muscle, bone, other } = percentageDefaults[mealType][age];\n\n  const updatedState = {\n    otherPercentages: other,\n    bonePercentage: bone,\n    musclePercentage: muscle,\n    ...getAmounts(totalDailyAmount, bone, rmbPercent, other),\n  };\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const setAge = (state, { isPuppy, isAdult }) => {\n  const { mealType } = state;\n  const age = isPuppy ? 'puppy' : 'adult';\n\n  const updatedState = {\n    ...state,\n    isPuppy,\n    isAdult,\n    age,\n    ...getPresetPercentages(state, mealType, age),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const setMealType = (state, { mealType }) => {\n  const { age } = state;\n  console.log('age', age);\n\n  const updatedState = {\n    ...state,\n    isPuppy: (age === 'puppy'),\n    isAdult: (age === 'adult'),\n    mealType,\n    ...getPresetPercentages(state, mealType, age),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nconst checkPresetAgeSettings = (mealType, bonePercentage, otherPercentages, ) => {\n  if (percentageDefaults[mealType]['adult'].bone === bonePercentage) {\n    const adultHasMismatch = some(percentageDefaults[mealType]['adult'].other, (value, key) => {\n      return otherPercentages[key] !== value;\n    });\n\n    if (!adultHasMismatch) {\n      return {\n        isAdult: true,\n        isPuppy: false,\n      };\n    }\n  }\n\n  if (percentageDefaults[mealType]['puppy'].bone === bonePercentage) {\n    const puppyHasMismatch = some(percentageDefaults[mealType]['puppy'].other, (value, key) => {\n      return otherPercentages[key] !== value; // as soon as you find a mismatch return\n    });\n\n    if (!puppyHasMismatch) {\n      return {\n        isAdult: false,\n        isPuppy: true,\n      };\n    }\n  }\n\n  return {\n    isAdult: false,\n    isPuppy: false,\n  };\n};\n\nexport const updateOtherPercentages = (state, { updatedProperty, updatedValue }) => {\n  const { totalDailyAmount, otherPercentages, bonePercentage, rmbPercent, mealType } = state;\n\n  const updatedOtherPercentages = {\n    ...otherPercentages,\n    [updatedProperty]: updatedValue,\n  };\n\n  const updatedMusclePercentage = getMusclePercentage(bonePercentage, updatedOtherPercentages);\n\n  const updatedState = {\n    ...state,\n    ...checkPresetAgeSettings(mealType, bonePercentage, updatedOtherPercentages),\n    otherPercentages: updatedOtherPercentages,\n    musclePercentage: updatedMusclePercentage,\n    ...getAmounts(totalDailyAmount, bonePercentage, rmbPercent, updatedOtherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nconst updateBonePercentage = (state, action) => {\n  const { totalDailyAmount, otherPercentages, rmbPercent, mealType } = state;\n  const { updatedBonePercentage } = action;\n  const updatedMusclePercentage = getMusclePercentage(updatedBonePercentage, otherPercentages);\n\n  const updatedState = {\n    ...state,\n    ...checkPresetAgeSettings(mealType, updatedBonePercentage, otherPercentages),\n    bonePercentage: updatedBonePercentage,\n    musclePercentage: updatedMusclePercentage,\n    ...getAmounts(totalDailyAmount, updatedBonePercentage, rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// RawMeatyBone\nconst updateRMB = (state, action) => {\n  const { totalDailyAmount, bonePercentage, otherPercentages } = state;\n\n  const updatedState = {\n    ...state,\n    rmbPercent: action.rmbPercent,\n    ...getAmounts(totalDailyAmount, bonePercentage, action.rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport default createMappedReducer(initialState, {\n  [UPDATE_OPTIONS]: updateOptions,\n  [UPDATE_BONE_PERCENTAGE]: updateBonePercentage,\n  [UPDATE_OTHER_PERCENTAGE]: updateOtherPercentages,\n  [UPDATE_RMB_PERCENT]: updateRMB,\n  [SET_AGE]: setAge,\n  [SET_MEAL_TYPE]: setMealType,\n});\n","export default function createMappedReducer(initialState, handlers) {\n  return (state = initialState, action) => {\n    const handler = handlers[action.type];\n\n    if (!handler) {\n      return state;\n    }\n\n    return handler(state, action);\n  };\n}\n","import { combineReducers } from 'redux';\nimport calculator from './calculator';\n\nexport default combineReducers({\n  calculator,\n});","import lodashRound from 'lodash/round';\n\n// wrapper for lodash/round that defaults the decimal place to 1\nconst round = (amount, to = 1) => {\n  return lodashRound(amount, to);\n};\n\nexport default round;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  h2: {\n    fontWeight: 400,\n    margin: theme.spacing(1),\n  },\n}));\n\nconst Header2 = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <h2 className={classes.h2}>{children}</h2>\n  );\n};\n\nHeader2.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default Header2;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    backgroundColor: 'white',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst Section = props => {\n  const classes = useStyles();\n\n  return (<div className={classes.section} {...props} />);\n};\n\nexport default Section;\n","import map from 'lodash/map';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, Table, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport round from '../../calculations/round';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  firstRow: {\n    fontWeight: 600,\n  },\n  table: {\n    margin: theme.spacing(1),\n    '& > tbody tr td': {\n      borderBottom: '1px solid #eee',\n      paddingLeft: 0,\n      paddingRight: theme.spacing(1),\n      paddingBottom: theme.spacing(.5),\n      paddingTop: theme.spacing(.5),\n    },\n  },\n  capitalize: {\n    textTransform: 'capitalize',\n  },\n}));\n\nconst getCellContentCreator = (unitDetails) => (amount) => {\n  const smallUnitAmount = `${round(amount)} ${unitDetails.sm}`;\n\n  if (amount < unitDetails.perUnit) {\n    return smallUnitAmount;\n  }\n\n  return `${round(amount / unitDetails.perUnit)} ${unitDetails.lg} / ${smallUnitAmount}`;  \n};\n\nconst AmountsTable = ({ \n  totalAmount,\n  muscleAmount,\n  boneAmount,\n  rmbPercent,\n  otherAmounts,\n  unitDetails,\n  title,\n}) => {\n  const classes = useStyles();\n  const createCellContent = getCellContentCreator(unitDetails);\n\n  return (\n    <Section> \n      <Header2>{title}</Header2>\n      <Table className={classes.table}>\n        <TableBody>\n          <TableRow>\n            <TableCell className={classes.firstRow}>Total Amount</TableCell>\n            <TableCell className={classes.firstRow} align=\"right\">{createCellContent(totalAmount)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Boneless Meat</TableCell>\n            <TableCell align=\"right\">{createCellContent(muscleAmount)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Raw Meaty Bone at {rmbPercent}%</TableCell>\n            <TableCell align=\"right\">{createCellContent(boneAmount)}</TableCell>\n          </TableRow>\n          {map(otherAmounts, (value, key) => (\n            <TableRow key={key}>\n              <TableCell className={classes.capitalize}>{key}</TableCell>\n              <TableCell align=\"right\">{createCellContent(value)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Section>\n  );\n};\n\nAmountsTable.propTypes = {\n  totalAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default AmountsTable;\n","import mapValues from 'lodash/mapValues';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AmountsTable from './AmountsTable';\nimport { Button, TextField, InputAdornment, makeStyles } from '@material-ui/core';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n  bulkTable: {\n    marginBottom: 50,\n  }\n}));\n\nconst BulkHelper = (props) => {\n  const {\n    totalDailyAmount,\n    muscleAmount,\n    boneAmount,\n    otherAmounts,\n    unitDetails,\n    rmbPercent,\n    setShowBulkTable,\n    shouldShowBulkTable,\n  } = props;\n\n  const classes = useStyles();\n  const [numDays, setNumDays] = useState(7);\n\n  const [totalAmountUpdated, setTotalUpdatedAmount] = useState(totalDailyAmount);\n  const [boneAmountUpdated, setBoneUpdatedAmount] = useState(boneAmount);\n  const [otherAmountsUpdated, setOtherUpdatedAmount] = useState(otherAmounts);\n  const [muscleAmountUpdated, setMuscleUpdatedAmount] = useState(muscleAmount);\n\n  useEffect(() => {\n    const updatedOther = mapValues(otherAmounts, value => value * numDays);\n    setTotalUpdatedAmount(totalDailyAmount * numDays);\n    setOtherUpdatedAmount(updatedOther);\n    setBoneUpdatedAmount(boneAmount * numDays);\n    setMuscleUpdatedAmount(muscleAmount * numDays);\n  }, [numDays]);\n\n  const handleButtonClick = () => {\n    // TODO: scroll down\n    setShowBulkTable(true);\n  };\n\n  return (\n    <div className={classes.bulkTable}>\n      <Section>\n        <Header2>Bulk Helper</Header2>\n        <div>\n          <TextField\n            className={classes.numericLarge}\n            id=\"numDays\"\n            label=\"How long\"\n            value={numDays}\n            type=\"number\"\n            onChange={e => setNumDays(Number(e.target.value))}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">days</InputAdornment>\n              ),\n            }}\n            helperText=\"minimum of 2 days\"\n          />\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={handleButtonClick}\n          >\n            Generate\n          </Button>\n        </div>\n      </Section>\n      {shouldShowBulkTable && (numDays > 1) &&\n        <AmountsTable\n          totalAmount={totalAmountUpdated}\n          muscleAmount={muscleAmountUpdated}\n          boneAmount={boneAmountUpdated}\n          otherAmounts={otherAmountsUpdated}\n          unitDetails={unitDetails}\n          rmbPercent={rmbPercent}\n          title={`Bulk Amounts for ${numDays} days`}\n        />\n      }\n    </div>\n  );\n};\n\nBulkHelper.propTypes = {\n  totalDailyAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  shouldShowBulkTable: PropTypes.bool.isRequired,\n  setShowBulkTable: PropTypes.func.isRequired,\n};\n\nexport default BulkHelper;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport default function configureStore(preloadedState) {\n  const middleware = [thunkMiddleware];\n\n  if (process.env.NODE_ENV !== 'production') {\n    const createLogger = require('redux-logger').createLogger;\n    middleware.push(createLogger({ collapsed: true }));\n  }\n\n  const store = createStore(rootReducer, preloadedState, applyMiddleware(...middleware));\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport AmountsTable from './AmountsTable';\nimport BulkHelper from './BulkHelper';\n\nconst WhatToFeed = () => {\n  const settings = useSelector(state => state.calculator);\n  const { totalDailyAmount, unitDetails, boneAmount, muscleAmount, otherAmounts, rmbPercent } = settings;\n  const [shouldShowBulkTable, setShowBulkTable] = useState(false);\n\n  useEffect(() => {\n    setShowBulkTable(false);\n  }, [totalDailyAmount, boneAmount, otherAmounts]);\n\n  return (\n    <React.Fragment>\n      <AmountsTable \n        totalAmount={totalDailyAmount}\n        muscleAmount={muscleAmount}\n        boneAmount={boneAmount}\n        rmbPercent={rmbPercent}\n        otherAmounts={otherAmounts}\n        unitDetails={unitDetails}\n        title=\"What to feed each day\"\n      />      \n      <BulkHelper\n        totalDailyAmount={totalDailyAmount}\n        muscleAmount={muscleAmount}\n        boneAmount={boneAmount}\n        rmbPercent={rmbPercent}\n        otherAmounts={otherAmounts}\n        unitDetails={unitDetails}\n        shouldShowBulkTable={shouldShowBulkTable}\n        setShowBulkTable={setShowBulkTable}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default WhatToFeed;\n","export default [\n  { name: 'Chicken Back', value: 44, key: 'Chicken-Back' },\n  { name: 'Chicken Breast', value: 20, key: 'Chicken-Breast' },\n  { name: 'Chicken Drumstick', value: 27, key: 'Chicken-Drumstick' },\n  { name: 'Chicken Feet', value: 60, key: 'Chicken-Feet' },\n  { name: 'Chicken Frame', value: 80, key: 'Chicken-Frame' },\n  { name: 'Chicken Leg Quarter', value: 30, key: 'Chicken-Leg-Quarter' },\n  { name: 'Chicken Neck with Skin', value: 36, key: 'Chicken-Neck-with-Skin' },\n  { name: 'Chicken Neck without Skin', value: 50, key: 'Chicken-Neck-without-Skin' },\n  { name: 'Chicken Thigh', value: 21, key: 'Chicken-Thigh' },\n  { name: 'Chicken Whole', value: 32, key: 'Chicken-Whole' },\n  { name: 'Chicken Wings', value: 46, key: 'Chicken-Wings' },\n  { name: 'Duck Foot', value: 60, key: 'Duck-Foot' },\n  { name: 'Duck Frame', value: 80, key: 'Duck-Frame' },\n  { name: 'Duck Neck', value: 50, key: 'Duck-Neck' },\n  { name: 'Duck Whole', value: 28, key: 'Duck-Whole' },\n  { name: 'Duck Wing', value: 39, key: 'Duck-Wing' },\n  { name: 'Pork Feet', value: 30, key: 'Pork-Feet' },\n  { name: 'Pork Ribs', value: 30, key: 'Pork-Ribs' },\n  { name: 'Pork Tail', value: 30, key: 'Pork-Tail' },\n  { name: 'Rabbit Feet', value: 40, key: 'Rabbit-Feet' },\n  { name: 'Rabbit Heads', value: 75, key: 'Rabbit-Heads' },\n  { name: 'Rabbit Whole', value: 28, key: 'Rabbit-Whole' },\n  { name: 'Turkey Neck', value: 45, key: 'Turkey-Neck' },\n  { name: 'Custom', value: 0, key: 'Custom' },\n];","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\nimport { updateRMB } from '../../actions/calculator';\nimport rmbOptions from '../../form/rawMeatyBoneOptions';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  rmbOption: {\n    margin: theme.spacing(1),\n    width: 115,\n  },\n  rmbCustom: {\n    margin: theme.spacing(1),\n    width: 135,\n  },\n}));\n\nconst RawMeatyBone = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const [customRMB, setCustomRMB] = useState(0);\n  const [rmbOption, setRmbOption] = useState(rmbOptions[0].value);\n\n  const onDropDownChange = (e) => {\n    const optionValue = Number(e.target.value);\n    setCustomRMB(0);\n    setRmbOption(optionValue);\n  };\n\n  useEffect(() => {\n    const rmbPercent = (rmbOption === 0) ? customRMB : rmbOption;\n\n    dispatch(updateRMB(rmbPercent));\n  }, [rmbOption, customRMB]);\n\n  return (\n    <Section>\n      <Header2>Raw Meaty Bone</Header2>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"boneType\">RMB Type</InputLabel>\n        <NativeSelect\n          name=\"boneType\"\n          id=\"boneType\"\n          onChange={onDropDownChange}\n          defaultValue={rmbOptions[0].value}\n        >\n          {rmbOptions.map(option => (\n            <option key={option.key} value={option.value}>{option.name}</option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n      {rmbOption !== 0 &&\n        <TextField\n          className={classes.rmbOption}\n          id=\"rmbOption\"\n          label=\"Bone Content\"\n          value={rmbOption}\n          type=\"number\"\n          disabled\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      }\n      {rmbOption === 0 &&\n        <TextField\n          className={classes.rmbCustom}\n          id=\"customRMB\"\n          label=\"Enter RMB %\"\n          value={customRMB}\n          type=\"number\"\n          onChange={e => setCustomRMB(Number(e.target.value))}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      }\n    </Section>\n  );\n};\n\nexport default RawMeatyBone;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\n\nimport round from '../../calculations/round';\nimport unitOptions from '../../form/unitOptions';\n\nimport { updateOptions } from '../../actions/calculator';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n}));\n\nconst BasicOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const settings = useSelector(state => state.calculator);\n  const { totalDailyAmount, weight, unitDetails, maintenance } = settings;\n\n  const [roundedDailyAmount, setRoundedDailyAmount] = useState(round(totalDailyAmount));\n\n  useEffect(() => {\n    setRoundedDailyAmount(round(totalDailyAmount));\n  }, [totalDailyAmount]);\n\n  return (\n    <Section>\n      <Header2>Options</Header2>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"unit\">Unit</InputLabel>\n        <NativeSelect\n          name=\"unit\"\n          id=\"unit\"\n          onChange={e => dispatch(updateOptions(weight, maintenance, e.target.value))}\n          value={unitDetails.name}\n        >\n          {unitOptions.map(option => (\n            <option key={option.key} value={option.value}>{option.name}</option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n      <TextField\n        className={classes.numericLarge}\n        id=\"weight\"\n        label=\"Dog Weight\"\n        value={weight}\n        type=\"number\"\n        onChange={e => dispatch(updateOptions(Number(e.target.value), maintenance))}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">{unitDetails.lg}</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericLarge}\n        id=\"maintenance\"\n        label=\"Maintenance\"\n        value={maintenance}\n        type=\"number\"\n        onChange={e => dispatch(updateOptions(weight, Number(e.target.value)))}\n        helperText=\"Start at 2.0-3.0%\"\n        inputProps={{\n          min: 0,\n          max: 100,\n          step: 0.1,\n        }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericLarge}\n        id=\"totalDailyAmount\"\n        label=\"Daily Amount\"\n        value={roundedDailyAmount}\n        type=\"number\"\n        disabled\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">{unitDetails.sm}</InputAdornment>\n          ),\n        }}\n      />\n    </Section>\n  );\n};\n\nexport default BasicOptions;\n","import map from 'lodash/map';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, Button,\n  InputAdornment, TextField, makeStyles\n} from '@material-ui/core';\nimport {\n  updateBonePercentage,\n  updateOtherPercentage,\n  setAge,\n  setMealType,\n} from '../../actions/calculator';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  numericSmall: {\n    margin: theme.spacing(1),\n    width: 55,\n  },\n  radioWrapper: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  radio: {\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n  },\n  radioLabel: {\n    fontSize: 14,\n    marginRight: theme.spacing(1),\n  },\n  formLabel: {\n    fontSize: 14,\n    marginBottom: theme.spacing(1),\n  },\n  buttonWrapper: {\n    '& > *': {\n      margin: theme.spacing(1),\n      marginRight: theme.spacing(0.5),\n    },\n  },\n}));\n\nconst PercentageOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    otherPercentages, musclePercentage, bonePercentage, isAdult, isPuppy, mealType,\n  } = useSelector(state => state.calculator);\n\n  return (\n    <Section>\n      <Header2>Percentages</Header2>\n      <div className={classes.radioWrapper}>\n        <FormControl component=\"fieldset\" margin=\"none\" variant=\"outlined\">\n          <FormLabel component=\"legend\" classes={{ root: classes.formLabel }}>Meal Type</FormLabel>\n          <RadioGroup\n            value={mealType} aria-label={mealType} name=\"mealType-radios\"\n            onChange={(e) => dispatch(setMealType(e.target.value))}\n            row\n          >\n            <FormControlLabel\n              label=\"BARF\"\n              value=\"barf\"\n              control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n              classes={{ label: classes.radioLabel }}\n            />\n            <FormControlLabel\n              label=\"PMR\"\n              value=\"pmr\"\n              control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n              classes={{ label: classes.radioLabel }}\n            />\n          </RadioGroup>\n        </FormControl>\n      </div>\n      <div className={classes.buttonWrapper}>\n        <span>Lifestage Preset:</span>\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          variant={isAdult ? \"contained\" : \"outlined\"}\n          onClick={() => dispatch(setAge({ isPuppy: false, isAdult: true }))}\n        >\n          Adult\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          variant={isPuppy ? \"contained\" : \"outlined\"}\n          onClick={() => dispatch(setAge({ isPuppy: true, isAdult: false }))}\n        >\n          Puppy\n        </Button>\n      </div>\n      <TextField\n        className={classes.numericSmall}\n        id=\"musclePercentage\"\n        label=\"Muscle\"\n        value={musclePercentage}\n        type=\"number\"\n        disabled\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericSmall}\n        id=\"bonePercentage\"\n        label=\"Bone\"\n        value={bonePercentage}\n        type=\"number\"\n        onChange={e => dispatch(updateBonePercentage(Number(e.target.value)))}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      {map(otherPercentages, (value, key) => (\n        <TextField\n          className={classes.numericSmall}\n          id={`${key}Percentage`}\n          key={`${key}Percentage`}\n          label={key}\n          value={value}\n          type=\"number\"\n          onChange={e => dispatch(updateOtherPercentage(Number(e.target.value), key))}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default PercentageOptions;\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport WhatToFeed from './WhatToFeed';\nimport RawMeatyBone from './RawMeatyBone';\nimport BasicOptions from './BasicOptions';\nimport PercentageOptions from './PercentageOptions';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst DogMealCalculator = () => (\n  <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <Section>\n        <Header2>Raw Dog Food Calculator - Recipe Helper</Header2>\n      </Section>\n      <BasicOptions />\n      <PercentageOptions />\n      <RawMeatyBone />\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <WhatToFeed />\n    </Grid>\n  </Grid>\n);\n\nexport default DogMealCalculator;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#4f5b62',\n      main: '#263238',\n      dark: '#000a12',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      light: '#98ee99',\n      main: '#66bb6a',\n      dark: '#338a3e',\n      contrastText: '#212121',\n    },\n  },\n  typography: {\n    h1: {\n      fontWeight: 300,\n    },\n    h2: {\n      fontWeight: 300,\n    },\n    h3: {\n      fontWeight: 300,\n    },\n    h4: {\n      fontWeight: 300,\n    },\n    h5: {\n      fontWeight: 300,\n    },\n    h6: {\n      fontWeight: 300,\n    },\n    subtitle1: {\n      fontWeight: 300,\n    },\n    subtitle2: {\n      fontWeight: 300,\n    },\n    body1: {\n      fontWeight: 300,\n    },\n    body2: {\n      fontWeight: 300,\n    },\n    button: {\n      fontWeight: 300,\n    },\n    caption: {\n      fontWeight: 300,\n    },\n    overline: {\n      fontWeight: 300,\n    },\n  },\n});\n\nexport default theme;","import React from \"react\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport DogMealCalculator from './calculator/DogMealCalculator';\nimport theme from '../theme';\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Container fixed>\n      <DogMealCalculator />\n    </Container>\n  </ThemeProvider>\n);\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport configureStore from '../common/configureStore';\nimport App from \"../common/components/App\";\nimport theme from '../common/theme';\n\nconst store = configureStore({});\n\nconst renderApp = () => render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>, \n  document.getElementById(\"app\")\n);\n\nrenderApp();"],"sourceRoot":""}