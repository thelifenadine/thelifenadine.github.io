{"version":3,"sources":["webpack:///./src/common/actions/calculator.js","webpack:///./src/common/localStorage/isStoreValid.js","webpack:///./src/common/localStorage/calculatorState.js","webpack:///./src/common/constants/presetMealPercentages.js","webpack:///./src/common/constants/rawMeatyBoneOptions.js","webpack:///./src/common/constants/unitOptions.js","webpack:///./src/common/calculations/toPercent.js","webpack:///./src/common/calculations/getTotalDailyAmount.js","webpack:///./src/common/calculations/getMuscleAmount.js","webpack:///./src/common/calculations/getBoneAmount.js","webpack:///./src/common/calculations/getAmountsByPercents.js","webpack:///./src/common/calculations/getAmounts.js","webpack:///./src/common/constants/essentialNutrients.js","webpack:///./src/common/calculations/getEssentialNutrients.js","webpack:///./src/common/calculations/getEstimatedCalories.js","webpack:///./src/common/reducers/helpers/getLifestageByPercentages.js","webpack:///./src/common/constants/lifestage.js","webpack:///./src/common/reducers/helpers/getPresetPercentages.js","webpack:///./src/common/reducers/helpers/getNewPercentagesAndAmounts.js","webpack:///./src/common/reducers/calculator.js","webpack:///./src/common/reducers/utils/createMappedReducer.js","webpack:///./src/common/reducers/index.js","webpack:///./src/common/components/layout/Header2.js","webpack:///./src/common/components/layout/Section.js","webpack:///./src/common/calculations/round.js","webpack:///./src/common/components/calculator/AmountsTable.js","webpack:///./src/common/calculations/getBulkOther.js","webpack:///./src/common/components/calculator/BulkTable.js","webpack:///./src/common/utils/validateInteger.js","webpack:///./src/common/components/calculator/WhatToFeed.js","webpack:///./src/common/components/calculator/RawMeatyBone.js","webpack:///./src/common/utils/validateFloat.js","webpack:///./src/common/components/calculator/BasicOptions.js","webpack:///./src/common/components/calculator/PercentageOptions.js","webpack:///./src/common/components/footer/Contact.js","webpack:///./src/common/localStorage/selectedLanguage.js","webpack:///./src/common/components/calculator/Main.js","webpack:///./src/common/theme.js","webpack:///./src/common/components/App.js","webpack:///./src/common/configureStore.js","webpack:///./src/client/index.js"],"names":["updateOptions","weight","maintenance","unitName","type","setLifestagePreset","updatedLifestage","isStoreValid","json","index","isValid","properties","keys","getDefaultState","length","saveState","state","serializedState","JSON","stringify","localStorage","setItem","presetMealPercentages","barf","adult","muscle","bone","other","liver","organ","veggie","seed","fruit","puppy","pmr","fibre","name","value","key","rmbLookup","custom","unitData","english","lg","sm","perUnit","per1000kCal","metric","toPercent","number","getTotalDailyAmount","maintenancePercentage","unitAmount","weightByUnit","totalAmountInOuncesOrGrams","getMuscleAmount","total","others","values","reduce","a","b","getMusclePercentage","bonePercentage","otherPercentages","getBoneAmount","amount","bonePercent","rmbPercent","totalAmount","percentages","mapValues","getAmounts","totalDailyAmount","updatedBoneAmount","updatedOtherAmounts","getAmountsByPercents","otherAmounts","boneAmount","muscleAmount","essentialNutrients","ala","unit","iodine","min","manganese","vitaminD","vitaminE","zinc","mapCalculatedNutrients","nutrientList","increaseAmount","nutrientItem","newValues","getEssentialNutrients","estimatedCalories","getEstimatedCalories","amountPer1000kCal","getLifestageByPercentages","mealType","some","getPresetPercentages","lifestagePreset","musclePercentage","getNewPercentagesAndAmounts","lifestage","updatedPercentages","initialState","handlers","unitDetails","lastSavedLifestage","rmbKey","isCustomRmb","createMappedReducer","getItem","parse","err","loadState","action","newUnitDetails","newDailyAmount","newEstimatedCalories","updatedState","updatedBonePercentage","updatedMusclePercentage","updatedProperty","updatedValue","newOtherPercentages","updatedMealType","handler","combineReducers","calculator","localize","localizeReducer","useStyles","makeStyles","theme","h2","fontWeight","margin","spacing","Header2","children","classes","className","propTypes","PropTypes","oneOfType","string","object","isRequired","section","backgroundColor","padding","marginTop","Section","props","round","to","lodashRound","firstRow","table","borderBottom","paddingLeft","paddingRight","paddingBottom","paddingTop","capitalize","textTransform","ContentCell","translate","Fragment","large","small","AmountsTable","title","Table","TableBody","TableRow","TableCell","data-testid","align","map","nutrientInfo","getBulkOther","numDays","BulkTable","bulkTitle","useState","totalAmountBulk","setTotalBulkAmount","boneAmountBulk","setBoneBulkAmount","otherAmountsBulk","setOtherBulkAmount","essentialNutrientsBulk","setNutrientBulkAmount","muscleAmountBulk","setMuscleBulkAmount","useEffect","days","validateInteger","parsed","parseInt","isNaN","numericLarge","width","WhatToFeed","useSelector","shallowEqual","shouldShowBulkTable","setShowBulkTable","setNumDays","amountsTableProps","bulkTable","TextField","id","label","onChange","e","target","onFocus","event","select","InputProps","endAdornment","InputAdornment","position","helperText","Button","size","variant","color","onClick","formControl","rmbOption","rmbCustom","RawMeatyBone","dispatch","useDispatch","onDropDownChange","dropdownValue","updateRMB","FormControl","InputLabel","htmlFor","NativeSelect","tabIndex","rmbOptions","option","disabled","updateCustomRMB","validateFloat","parseFloat","formLabel","fontSize","marginBottom","marginLeft","BasicOptions","roundedDailyAmount","setRoundedDailyAmount","roundedCalories","setRoundedCalories","updateUnitDetails","weightInKgs","weightInLbs","unitOptions","percentage","inputProps","max","step","FormLabel","component","root","numericSmall","radioWrapper","radio","radioLabel","marginRight","buttonWrapper","PercentageOptions","otherStartIndex","RadioGroup","aria-label","row","FormControlLabel","control","Radio","pTag","aTag","palette","secondary","dark","textDecoration","Contact","languages","activeLanguage","setActiveLanguage","updateLanguage","languageCode","str","href","rel","code","lang","array","func","defaultProps","withLocalize","Main","Grid","container","item","xs","md","createMuiTheme","primary","light","main","contrastText","typography","h1","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","App","initialize","translation","globalTranslations","options","defaultLanguage","renderToStaticMarkup","ThemeProvider","CssBaseline","Container","fixed","React","Component","preloadedState","middleware","store","thunkMiddleware","createStore","rootReducer","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"app.bundle.js","sourcesContent":["export const UPDATE_OPTIONS = 'UPDATE_OPTIONS';\nexport const UPDATE_BONE_PERCENTAGE = 'UPDATE_BONE_PERCENTAGE';\nexport const UPDATE_OTHER_PERCENTAGE = 'UPDATE_OTHER_PERCENTAGE';\nexport const UPDATE_RMB_PERCENT = 'UPDATE_RMB_PERCENT';\nexport const UPDATE_CUSTOM_RMB_PERCENT = 'UPDATE_CUSTOM_RMB_PERCENT';\nexport const SET_MEAL_TYPE = 'SET_MEAL_TYPE';\nexport const SET_LIFESTAGE_PRESET = 'SET_LIFESTAGE_PRESET';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// BasicOptions\nexport function updateOptions(weight, maintenance, unitName) {\n  return {\n    type: UPDATE_OPTIONS,\n    weight: weight,\n    maintenance: maintenance,\n    unitName,\n  };\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PercentageOptions\nexport function setMealType(updatedMealType) {\n  return {\n    type: SET_MEAL_TYPE,\n    updatedMealType,\n  };\n}\n\nexport function setLifestagePreset(updatedLifestage) {\n  return {\n    type: SET_LIFESTAGE_PRESET,\n    updatedLifestage,\n  };\n}\n\nexport function updateBonePercentage (updatedBonePercentage)  {\n  return {\n    type: UPDATE_BONE_PERCENTAGE,\n    updatedBonePercentage,\n  };\n}\nexport function updateOtherPercentage(updatedValue, propertyName)  {\n  return {\n    type: UPDATE_OTHER_PERCENTAGE,\n    updatedProperty: propertyName,\n    updatedValue,\n  };\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// RawMeatyBone\nexport function updateRMB(rmbKey, isCustomRmb) {\n  return {\n    type: UPDATE_RMB_PERCENT,\n    rmbKey,\n    isCustomRmb,\n  };\n}\n\nexport function updateCustomRMB(rmbPercent) {\n  return {\n    type: UPDATE_CUSTOM_RMB_PERCENT,\n    rmbPercent: rmbPercent,\n  };\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","import keys from 'lodash/keys';\nimport { getDefaultState } from '../reducers/calculator';\n/*\n  Goal with this is to have some way to prevent the whole site breaking\n  if an update is shipped that includes new items in the store\n*/\nconst isStoreValid = (json) => {\n  let index = 0;\n  let isValid = true;\n\n  const properties = keys(getDefaultState());\n  while (index < properties.length && isValid) {\n    if (typeof json[properties[index]] === 'undefined') {\n      isValid = false;\n    }\n\n    index++;\n  }\n\n  return isValid;\n};\n\nexport default isStoreValid;\n","import isStoreValid from './isStoreValid';\n\nexport function loadState() {\n  try {\n    const serializedState = localStorage.getItem('dogfood_v0.2');\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    const json = JSON.parse(serializedState);\n\n    if (isStoreValid(json)) {\n      // alternately - instead of doing this, you could find the new items and add to the store\n      // or name the store with a version and compare and update the new one\n      // what we want to avoid is updating the website and it not being backwards compatible with\n      // whatever the person has saved in their local storage\n      // we also don't need to save everything in the local state... just the main settings\n      return json;\n    }\n\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport function saveState(state) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('dogfood_v0.2', serializedState);\n  } catch {\n    // ignore write errors\n  }\n}\n","const presetMealPercentages = {\n  barf: {\n    adult: {\n      muscle: 70,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        veggie: 7,\n        seed: 2,\n        fruit: 1,\n      },\n    },\n    puppy: {\n      muscle: 58,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        veggie: 7,\n        seed: 3,\n        fruit: 1,\n      },\n    },\n  },\n  'barf-traditional': {\n    adult: {\n      muscle: 70,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        veggie: 10,\n      },\n    },\n    puppy: {\n      muscle: 58,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        veggie: 10,\n      },\n    },\n  },\n  pmr: {\n    adult: {\n      muscle: 78,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        fibre: 2,\n      },\n    },\n    puppy: {\n      muscle: 67,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        fibre: 2,\n      },\n    },\n  },\n  'pmr-traditional': {\n    adult: {\n      muscle: 80,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n      },\n    },\n    puppy: {\n      muscle: 69,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n      },\n    },\n  },\n};\n\nexport default presetMealPercentages;\n","export default [\n  { name: 'Chicken Back (44%)', value: 44, key: 'chicken-back' },\n  { name: 'Chicken Breast (20%)', value: 20, key: 'chicken-breast' },\n  { name: 'Chicken Drumstick (27%)', value: 27, key: 'chicken-drumstick' },\n  { name: 'Chicken Feet (60%)', value: 60, key: 'chicken-feet' },\n  { name: 'Chicken Frame (80%)', value: 80, key: 'chicken-frame' },\n  { name: 'Chicken Leg Quarter (30%)', value: 30, key: 'chicken-leg-quarter' },\n  { name: 'Chicken Neck with Skin (36%)', value: 36, key: 'chicken-neck-with-wkin' },\n  { name: 'Chicken Neck without Skin (50%)', value: 50, key: 'chicken-neck-without-skin' },\n  { name: 'Chicken Thigh (21%)', value: 21, key: 'chicken-thigh' },\n  { name: 'Chicken Whole (32%)', value: 32, key: 'chicken-whole' },\n  { name: 'Chicken Wings (46%)', value: 46, key: 'chicken-wings' },\n  { name: 'Duck Foot (60%)', value: 60, key: 'duck-foot' },\n  { name: 'Duck Frame (80%)', value: 80, key: 'duck-frame' },\n  { name: 'Duck Neck (50%)', value: 50, key: 'duck-neck' },\n  { name: 'Duck Whole (28%)', value: 28, key: 'duck-whole' },\n  { name: 'Duck Wing (39%)', value: 39, key: 'duck-wing' },\n  { name: 'Pork Feet (30%)', value: 30, key: 'pork-feet' },\n  { name: 'Pork Ribs (30%)', value: 30, key: 'pork-ribs' },\n  { name: 'Pork Tail (30%)', value: 30, key: 'pork-tail' },\n  { name: 'Rabbit Feet (40%)', value: 40, key: 'rabbit-feet' },\n  { name: 'Rabbit Heads (75%)', value: 75, key: 'rabbit-heads' },\n  { name: 'Rabbit Whole (28%)', value: 28, key: 'rabbit-whole' },\n  { name: 'Turkey Neck (45%)', value: 45, key: 'turkey-neck' },\n  { name: 'Custom', value: 0, key: 'custom' },\n];\n\nexport const rmbLookup = {\n  'chicken-back': 44,\n  'chicken-breast': 20,\n  'chicken-drumstick': 27,\n  'chicken-feet': 60,\n  'chicken-frame': 80,\n  'chicken-leg-quarter': 30,\n  'chicken-neck-with-wkin': 36,\n  'chicken-neck-without-skin': 50,\n  'chicken-thigh': 21,\n  'chicken-whole': 32,\n  'chicken-wings': 46,\n  'duck-foot': 60,\n  'duck-frame': 80,\n  'duck-neck': 50,\n  'duck-whole': 28,\n  'duck-wing': 39,\n  'pork-feet': 30,\n  'pork-ribs': 30,\n  'pork-tail': 30,\n  'rabbit-feet': 40,\n  'rabbit-heads': 75,\n  'rabbit-whole': 28,\n  'turkey-neck': 45,\n  custom: 0,\n};\n","export default [\n  { name: 'lb / ounce', value: 'english', key: 'english' },\n  { name: 'kg / gram', value: 'metric', key: 'metric' },\n];\n\nexport const unitData = {\n  english: {\n    name: 'english',\n    lg: 'lb',\n    sm: 'oz',\n    perUnit: 16, // 16 oz per lb\n    per1000kCal: 19, // oz per 1000 kcal\n  },\n  metric: {\n    name: 'metric',\n    lg: 'kg',\n    sm: 'g',\n    perUnit: 1000, // 1000 g per kg\n    per1000kCal: 538, // g per 1000 kcal\n  }\n};\n","const toPercent = number => {\n  return number / 100;\n};\n\nexport default toPercent;\n","import toPercent from './toPercent';\n\n/*\n  The weight of the dog, is passed in as either pounds or kilograms.\n\n  The weight is multiplied by it's smaller unit amount, for example 16 (16 oz per lb) to\n  get the amount that the dog weights in ounces (or 1000 for grams).\n\n  The maintenance amount to be fed to the dog is passed in as an integer (2, for example)\n  and divided by 100 to get it's percentage: 0.02\n\n  The total amount to be fed (per day) is then calculated by multiplying the weight of the\n  dog by the calculated percentage to feed and returned in ounces or grams.\n*/\nconst getTotalDailyAmount = (weight, maintenancePercentage, unitAmount = 16) => {\n  const weightByUnit = weight * unitAmount;\n  const totalAmountInOuncesOrGrams = weightByUnit * toPercent(maintenancePercentage);\n  return totalAmountInOuncesOrGrams;\n};\n\nexport default getTotalDailyAmount;\n","import values from 'lodash/values';\n\nconst getMuscleAmount = (total, bone, others) => {\n  const sum = bone + values(others).reduce((a, b) => (a + b), 0);\n  return total - sum;\n};\n\nexport const getMusclePercentage = (bonePercentage, otherPercentages) =>\n  getMuscleAmount(100, bonePercentage, otherPercentages);\n\nexport default getMuscleAmount;\n","import toPercent from './toPercent';\n\nconst getBoneAmount = (amount, bonePercent, rmbPercent) => {\n  if (rmbPercent === 0) return 0;\n\n  const newBoneAmount = (amount * toPercent(bonePercent)) / toPercent(rmbPercent);\n  return newBoneAmount;\n};\n\nexport default getBoneAmount;\n","import mapValues from 'lodash/mapValues';\nimport toPercent from './toPercent';\n\nconst getAmountByPercent = (amount, percentAmount) => {\n  return amount * toPercent(percentAmount);\n};\n\nexport default (totalAmount, percentages) => \n  mapValues(percentages, value => getAmountByPercent(totalAmount, value));\n\n","import getMuscleAmount from './getMuscleAmount';\nimport getBoneAmount from './getBoneAmount';\nimport getAmountsByPercents from './getAmountsByPercents';\n/*\n  This function calculates the breakdown of the amounts to feed\n\n  The arguments passed in update the following:\n  totalDailyAmount: all\n  rmbPercent: muscle & bone\n  bonePercentage: muscle & bone\n  otherPercentages: muscle & other\n\n  The muscle amount auto balances as the other portions change\n*/\nconst getAmounts = (totalDailyAmount, rmbPercent, percentages) => {\n  const { bonePercentage, otherPercentages } = percentages;\n\n  const updatedBoneAmount = getBoneAmount(totalDailyAmount, bonePercentage, rmbPercent);\n  const updatedOtherAmounts = getAmountsByPercents(totalDailyAmount, otherPercentages);\n  const updatedMuscleAmount = getMuscleAmount(totalDailyAmount, updatedBoneAmount, updatedOtherAmounts);\n\n  return {\n    otherAmounts: updatedOtherAmounts,\n    boneAmount: updatedBoneAmount,\n    muscleAmount: updatedMuscleAmount,\n  };\n};\n\nexport default getAmounts;\n","export const essentialNutrients = {\n  ala: {\n    name: 'ALA',\n    adult: 110,\n    puppy: 200,\n    unit: 'mg',\n  },\n  'epa-plus-dha': {\n    name: 'EPA + DHA',\n    adult: 110,\n    puppy: 130,\n    unit: 'mg',\n  },\n  iodine: {\n    name: 'Iodine',\n    min: {\n      adult: 175,\n    },\n    adult: 220,\n    puppy: 220,\n    unit: 'mcg',\n  },\n  manganese: {\n    name: 'Manganese',\n    adult: 1.2,\n    puppy: 1.4,\n    unit: 'mg',\n  },\n  vitaminD: {\n    name: 'Vitamin D',\n    adult: 3.4,\n    puppy: 3.4,\n    unit: 'mcg',\n  },\n  vitaminE: {\n    name: 'Vitamin E',\n    adult: 7.5,\n    puppy: 7.5,\n    unit: 'mg',\n  },\n  zinc: {\n    name: 'Zinc',\n    adult: 15,\n    puppy: 25,\n    unit: 'mg',\n  },\n};\n","import mapValues from 'lodash/mapValues';\nimport { essentialNutrients } from '../constants/essentialNutrients';\n\nexport const mapCalculatedNutrients = (nutrientList, increaseAmount) => {\n  return mapValues(nutrientList, (nutrientItem) => {\n    const newValues = {\n      ...nutrientItem,\n      adult: nutrientItem['adult'] * increaseAmount,\n      puppy: nutrientItem['puppy'] * increaseAmount,\n    };\n\n    if (nutrientItem.min) {\n      newValues.min = {\n        // there is only an adult option currently\n        adult: nutrientItem.min.adult * increaseAmount,\n      };\n    }\n\n    return newValues;\n  });\n};\n\nconst getEssentialNutrients = (estimatedCalories) => {\n  const nutrientPercentage = estimatedCalories / 1000;\n  return mapCalculatedNutrients(essentialNutrients, nutrientPercentage);\n};\n\nexport default getEssentialNutrients;\n","/*\n  amountPer1000kCal is determined by the unit options\n    19 oz per 1000kcal\n    538 g per 1000kcal\n\n  totalAmount is the weight of the totalDailyAmount\n  to be fed (either in ounces or grams)\n*/\n\nconst getEstimatedCalories = (amountPer1000kCal, totalAmount) => {\n  const calPerUnit = 1000 / amountPer1000kCal;\n  return calPerUnit * totalAmount;\n};\n\n\nexport default getEstimatedCalories;\n","import some from 'lodash/some';\nimport presetMealPercentages from '../../constants/presetMealPercentages';\nimport { adult, puppy } from '../../constants/lifestage';\n\n/*\n  This function determines whether the percentages match the default selections for\n  a particular age group, and if so, that button is set to active\n*/\nconst getLifestageByPercentages = (mealType, bonePercentage, otherPercentages, ) => {\n  if (presetMealPercentages[mealType][adult].bone === bonePercentage) {\n    const isAdultInvalid = some(presetMealPercentages[mealType][adult].other, (value, key) => {\n      return otherPercentages[key] !== value; // as soon as you find a mismatch return\n    });\n\n    if (!isAdultInvalid) {\n      return adult;\n    }\n  }\n\n  if (presetMealPercentages[mealType][puppy].bone === bonePercentage) {\n    const isPuppyInvalid = some(presetMealPercentages[mealType][puppy].other, (value, key) => {\n      return otherPercentages[key] !== value; // as soon as you find a mismatch return\n    });\n\n    if (!isPuppyInvalid) {\n      return puppy;\n    }\n  }\n\n  return undefined;\n};\n\nexport default getLifestageByPercentages;\n","export const adult = 'adult';\nexport const puppy = 'puppy';\n","import presetMealPercentages from '../../constants/presetMealPercentages';\n\n// get the preset percentages based on the recipe name and lifestage\nexport const getPresetPercentages = (mealType, lifestagePreset = 'adult') => {\n  const { muscle, bone, other } = presetMealPercentages[mealType][lifestagePreset];\n\n  return {\n    otherPercentages: other,\n    bonePercentage: bone,\n    musclePercentage: muscle,\n  };\n};\n\nexport default getPresetPercentages;\n","import getPresetPercentages from './getPresetPercentages';\nimport getAmounts from '../../calculations/getAmounts';\n\n/*\n  This file simply consolidates the getPresetPercentages and getAmounts\n  calculations and returns their properties together\n*/\nconst getNewPercentagesAndAmounts = (state, mealType, lifestage) => {\n  const { totalDailyAmount, rmbPercent } = state;\n  const updatedPercentages = getPresetPercentages(mealType, lifestage);\n\n  return {\n    ...updatedPercentages,\n    ...getAmounts(totalDailyAmount, rmbPercent, updatedPercentages),\n  };\n};\n\nexport default getNewPercentagesAndAmounts;\n","import {\n  UPDATE_OPTIONS,\n  UPDATE_BONE_PERCENTAGE,\n  UPDATE_OTHER_PERCENTAGE,\n  UPDATE_RMB_PERCENT,\n  UPDATE_CUSTOM_RMB_PERCENT,\n  SET_LIFESTAGE_PRESET,\n  SET_MEAL_TYPE,\n} from '../actions/calculator';\n\n// utils\nimport { saveState, loadState } from '../localStorage/calculatorState';\nimport createMappedReducer from './utils/createMappedReducer';\n\n// constants\nimport presetMealPercentages from '../constants/presetMealPercentages';\nimport { adult } from '../constants/lifestage';\nimport { rmbLookup } from '../constants/rawMeatyBoneOptions';\nimport { unitData } from '../constants/unitOptions';\n\n// calculations\nimport getTotalDailyAmount from '../calculations/getTotalDailyAmount';\nimport { getMusclePercentage } from '../calculations/getMuscleAmount';\nimport getAmounts from '../calculations/getAmounts';\nimport getEssentialNutrients from '../calculations/getEssentialNutrients';\nimport getEstimatedCalories from '../calculations/getEstimatedCalories';\n\n// reducer helpers\nimport getLifestageByPercentages from './helpers/getLifestageByPercentages';\nimport getNewPercentagesAndAmounts from './helpers/getNewPercentagesAndAmounts';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// INITIAL STATE\nexport const getDefaultState = () => {\n  const rmbPercent = 44;\n  const weight = 50;\n  const maintenance = 2.5;\n  const unitDetails = unitData['english'];\n  const mealType = 'barf';\n  const lifestagePreset = adult;\n  const { muscle, bone, other } = presetMealPercentages[mealType][lifestagePreset];\n\n  const totalDailyAmount = getTotalDailyAmount(weight, maintenance, unitDetails.perUnit);\n  const estimatedCalories = getEstimatedCalories(unitDetails.per1000kCal, totalDailyAmount);\n\n  return {\n    unitDetails,\n    mealType,\n    lifestagePreset,\n    lastSavedLifestage: lifestagePreset,\n    weight,\n    maintenance,\n    totalDailyAmount,\n    rmbPercent,\n    rmbKey: rmbLookup['chicken-back'],\n    isCustomRmb: false,\n    musclePercentage: muscle,\n    bonePercentage: bone,\n    otherPercentages: other,\n    estimatedCalories,\n    essentialNutrients: getEssentialNutrients(estimatedCalories, lifestagePreset),\n    ...getAmounts(totalDailyAmount, rmbPercent, { bonePercentage: bone, otherPercentages: other }),\n  };\n};\n\nconst getInitialState = () => loadState() || getDefaultState();\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  BasicOptions\n\n  The BasicOptions component allows the user to modify:\n    - units (metric vs english)\n    - dog weight\n    - maintenance percentage (activity level of the dog) typically 2.0 - 3.0\n\n  These three properties allow us to calculate the total daily amount of food to feed.\n  This is then used to calculate the estimated calories, the amount of each essenential nutrient,\n  and the breakdown of each portion (bone, muscle meat, organ, veggies, etc)\n  --> indicates the properties that are affected/changed\n\n  unitDetails: (english or metric)\n    --> totalDailyAmount, estimatedCalories\n      totalDailyAmount --> getAmounts, estimatedCalories\n                                          (--> essentialNutrients)\n  weight (number)\n    --> totalDailyAmount\n    totalDailyAmount --> getAmounts, estimatedCalories\n                                      (--> essentialNutrients)\n\n  maintenance (number)\n    --> totalDailyAmount\n    totalDailyAmount --> getAmounts, estimatedCalories\n                                      (--> essentialNutrients)\n\n*/\nexport const updateOptions = (state, action) => {\n  const { otherPercentages, bonePercentage, rmbPercent } = state;\n  const { weight, maintenance, unitName } = action;\n\n  const newUnitDetails = unitData[unitName];\n  const newDailyAmount = getTotalDailyAmount(weight, maintenance, newUnitDetails.perUnit);\n  const newEstimatedCalories = getEstimatedCalories(newUnitDetails.per1000kCal, newDailyAmount);\n\n  const updatedState = {\n    ...state,\n    weight,\n    maintenance,\n    unitDetails: newUnitDetails,\n    totalDailyAmount: newDailyAmount,\n    estimatedCalories: newEstimatedCalories,\n    essentialNutrients: getEssentialNutrients(newEstimatedCalories),\n    ...getAmounts(newDailyAmount, rmbPercent, { bonePercentage, otherPercentages }),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  PercentageOptions\n\n  The PercentageOptions component allows the user to modify:\n  - mealType (barf, pmr, etc)\n  - lifestagePreset (puppy vs adult)\n  - the individual percentages for each mealType\n\n  mealType (barf, pmr, etc)\n  -  this resets the percentages for that mealtype and the existing lifestage\n\n  lifestagePreset (adult, puppy)\n  - this resets the percentages for that lifestage and the existing mealtype\n\n  bonePercentage\n  - when increased or decreased, the musclePercentage changes to rebalance the ratios\n  - the lifestagePreset is also evaluated here to see if it matches adult, puppy, or none\n\n  otherPercentage\n  - when increased or decreased, the musclePercentage changes to rebalance the ratios\n  - the lifestagePreset is also evaluated here to see if it matches adult, puppy, or none\n\n  for every property change:\n    - The amounts (in weight) of each portion are recalculated based on the new percentages\n\n*/\n// updatedLifestage updates the lifestage, percentages, amounts\nexport const setLifestagePreset = (state, { updatedLifestage }) => {\n  const { mealType } = state;\n\n  const updatedState = {\n    ...state,\n    lifestagePreset: updatedLifestage,\n    lastSavedLifestage: updatedLifestage,\n    ...getNewPercentagesAndAmounts(state, mealType, updatedLifestage),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// setMealType updates the mealType, percentages, and amounts\nexport const setMealType = (state, { updatedMealType }) => {\n  const updatedState = {\n    ...state,\n    mealType: updatedMealType,\n    ...getNewPercentagesAndAmounts(state, updatedMealType, state.lastSavedLifestage)\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const updateOtherPercentages = (state, { updatedProperty, updatedValue }) => {\n  const { totalDailyAmount, otherPercentages, bonePercentage, rmbPercent, mealType, lastSavedLifestage } = state;\n\n  const newOtherPercentages = {\n    ...otherPercentages,\n    [updatedProperty]: updatedValue,\n  };\n\n  const updatedMusclePercentage = getMusclePercentage(bonePercentage, newOtherPercentages);\n  const lifestagePreset = getLifestageByPercentages(mealType, bonePercentage, newOtherPercentages);\n\n  const updatedState = {\n    ...state,\n    otherPercentages: newOtherPercentages,\n    musclePercentage: updatedMusclePercentage,\n    lifestagePreset, // can be set to undefined\n    lastSavedLifestage: lifestagePreset || lastSavedLifestage, // must always be a value\n    ...getAmounts(\n      totalDailyAmount, rmbPercent, { bonePercentage, otherPercentages: newOtherPercentages },\n    ),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const updateBonePercentage = (state, action) => {\n  const { totalDailyAmount, otherPercentages, rmbPercent, mealType, lastSavedLifestage } = state;\n  const { updatedBonePercentage } = action;\n  const updatedMusclePercentage = getMusclePercentage(updatedBonePercentage, otherPercentages);\n  const lifestagePreset = getLifestageByPercentages(mealType, updatedBonePercentage, otherPercentages);\n\n  const updatedState = {\n    ...state,\n    bonePercentage: updatedBonePercentage,\n    musclePercentage: updatedMusclePercentage,\n    lifestagePreset, // can be undefined\n    lastSavedLifestage: lifestagePreset || lastSavedLifestage, // cannot be undefined\n    ...getAmounts(\n      totalDailyAmount, rmbPercent, { bonePercentage: updatedBonePercentage, otherPercentages },\n    ),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  RawMeatyBone\n\n  The RawMeatyBone component allows the user to modify:\n  - rmbKey\n    - if a string - corresponds with a number which updates the rmbPercent value\n      - the rmbPercent is updated based on the rmbLookup table\n      - isCustomRmb is set to true\n    - if the key = \"custom\", then isCustomRmb is set to false and the form allows\n      - the rmbPercent numeric value to be manually entered\n\n  - the rmbPercent affects the portions of muscle & bone amounts,\n    so those amounts must be recalculated\n*/\nexport const updateRMB = (state, action) => {\n  const { totalDailyAmount, bonePercentage, otherPercentages } = state;\n  const { rmbKey, isCustomRmb } = action;\n\n  const rmbPercent = isCustomRmb ? 0 : rmbLookup[rmbKey];\n  const updatedState = {\n    ...state,\n    rmbKey,\n    rmbPercent: rmbPercent,\n    isCustomRmb: isCustomRmb,\n    ...getAmounts(totalDailyAmount, rmbPercent, { bonePercentage, otherPercentages }),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const updateCustomRMB = (state, action) => {\n  const { totalDailyAmount, bonePercentage, otherPercentages } = state;\n  const { rmbPercent } = action;\n\n  const updatedState = {\n    ...state,\n    rmbPercent,\n    ...getAmounts(totalDailyAmount, rmbPercent, { bonePercentage, otherPercentages }),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// ---------------------- exports -------------------------\nexport default createMappedReducer(getInitialState(), {\n  [UPDATE_OPTIONS]: updateOptions,\n  [UPDATE_BONE_PERCENTAGE]: updateBonePercentage,\n  [UPDATE_OTHER_PERCENTAGE]: updateOtherPercentages,\n  [UPDATE_RMB_PERCENT]: updateRMB,\n  [UPDATE_CUSTOM_RMB_PERCENT]: updateCustomRMB,\n  [SET_LIFESTAGE_PRESET]: setLifestagePreset,\n  [SET_MEAL_TYPE]: setMealType,\n});\n","export default function createMappedReducer(initialState, handlers) {\n  return (state = initialState, action) => {\n    const handler = handlers[action.type];\n\n    if (!handler) {\n      return state;\n    }\n\n    return handler(state, action);\n  };\n}\n","import { combineReducers } from 'redux';\nimport { localizeReducer } from 'react-localize-redux';\n\nimport calculator from './calculator';\n\nexport default combineReducers({\n  calculator,\n  localize: localizeReducer,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  h2: {\n    fontWeight: 400,\n    margin: theme.spacing(1),\n  },\n}));\n\nconst Header2 = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <h2 className={classes.h2}>{children}</h2>\n  );\n};\n\nHeader2.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]).isRequired,\n};\n\nexport default Header2;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    backgroundColor: 'white',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst Section = props => {\n  const classes = useStyles();\n\n  return (<div className={classes.section} {...props} />);\n};\n\nexport default Section;\n","import lodashRound from 'lodash/round';\n\n// wrapper for lodash/round that defaults the decimal place to 1\nconst round = (amount, to = 2) => {\n  return lodashRound(amount, to);\n};\n\nexport default round;\n","import map from 'lodash/map';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, Table, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport round from '../../calculations/round';\nimport { Translate } from 'react-localize-redux';\n\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\n\nconst useStyles = makeStyles((theme) => ({\n  firstRow: {\n    fontWeight: 600,\n  },\n  table: {\n    margin: theme.spacing(1),\n    '& > tbody tr td': {\n      borderBottom: '1px solid #eee',\n      paddingLeft: 0,\n      paddingRight: theme.spacing(1),\n      paddingBottom: theme.spacing(.5),\n      paddingTop: theme.spacing(.5),\n    },\n  },\n  capitalize: {\n    textTransform: 'capitalize',\n  },\n}));\n\nconst ContentCell = ({ unitDetails, amount }) => {\n  if (amount < unitDetails.perUnit) {\n    return (\n      <Translate>\n        {({ translate }) => (\n          <React.Fragment>{`${round(amount)} ${translate(`units.${unitDetails.sm}`)}`}</React.Fragment>\n        )}\n      </Translate>\n    );\n  }\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        translate(`units.${unitDetails.lg}-${unitDetails.sm}`, {\n          large: round(amount / unitDetails.perUnit),\n          small: round(amount),\n        })\n      )}\n    </Translate>\n  );\n};\n\nContentCell.propTypes = {\n  amount: PropTypes.number.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n};\n\nconst AmountsTable = ({\n  totalDailyAmount,\n  muscleAmount,\n  boneAmount,\n  rmbPercent,\n  otherAmounts,\n  unitDetails,\n  essentialNutrients,\n  lastSavedLifestage,\n  title,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <Section>\n          <Header2>{title}</Header2>\n          <Table className={classes.table}>\n            <TableBody>\n              <TableRow>\n                <TableCell className={classes.firstRow} data-testid=\"totalAmountLabel\">\n                  {translate('amountsTable.total-amount')}\n                </TableCell>\n                <TableCell className={classes.firstRow} align=\"right\" data-testid=\"totalAmount\">\n                  <ContentCell unitDetails={unitDetails} amount={totalDailyAmount} />\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell data-testid=\"muscleAmountLabel\">{translate('amountsTable.boneless-meat')}</TableCell>\n                <TableCell align=\"right\" data-testid=\"muscleAmount\">\n                  <ContentCell unitDetails={unitDetails} amount={muscleAmount} />\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell data-testid=\"boneAmountLabel\">{translate('amountsTable.raw-meaty-bone-at-amount', { amount: rmbPercent })}</TableCell>\n                <TableCell align=\"right\" data-testid=\"boneAmount\">\n                  <ContentCell unitDetails={unitDetails} amount={boneAmount} />\n                </TableCell>\n              </TableRow>\n              {map(otherAmounts, (value, key) => (\n                <TableRow key={key} data-testid=\"otherAmounts\">\n                  <TableCell className={classes.capitalize} data-testid={`${key}AmountLabel`}>{translate(`percentageOptions.${key}`)}</TableCell>\n                  <TableCell align=\"right\" data-testid={`${key}Amount`}>\n                    <ContentCell unitDetails={unitDetails} amount={value} />\n                  </TableCell>\n                </TableRow>\n              ))}\n              <TableRow>\n                <TableCell className={classes.firstRow}>{translate('amountsTable.essential-nutrients')}</TableCell>\n                <TableCell className={classes.firstRow} align=\"right\">{translate('amountsTable.recommended-amounts', { lifestage: translate(`amountsTable.${lastSavedLifestage}`)})}</TableCell>\n              </TableRow>\n              {map(essentialNutrients, (nutrientInfo, key) => (\n                <TableRow key={key}>\n                  <TableCell className={classes.capitalize} data-testid={`${key}Label`}> {translate(`amountsTable.${key}`)} </TableCell>\n                  <TableCell align=\"right\" data-testid={`${key}Amount`}>{`${round(nutrientInfo[lastSavedLifestage], 2)} ${translate(`units.${nutrientInfo.unit}`)}`}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Section>\n      )}\n    </Translate>\n  );\n};\n\nAmountsTable.propTypes = {\n  totalDailyAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  lastSavedLifestage: PropTypes.string.isRequired,\n  essentialNutrients: PropTypes.object.isRequired,\n};\n\nexport default AmountsTable;\n","import mapValues from 'lodash/mapValues';\n\n// loop through the otherAmounts collection and update each value multipled by number of days\nconst getBulkOther = (otherAmounts, numDays) => mapValues(otherAmounts, value => value * numDays);\n\nexport default getBulkOther;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AmountsTable from './AmountsTable';\nimport { mapCalculatedNutrients } from '../../calculations/getEssentialNutrients';\nimport getBulkOther from '../../calculations/getBulkOther';\n\nconst BulkTable = (props) => {\n  const {\n    totalDailyAmount,\n    muscleAmount,\n    boneAmount,\n    otherAmounts,\n    unitDetails,\n    rmbPercent,\n    numDays,\n    essentialNutrients,\n    lastSavedLifestage,\n    bulkTitle,\n  } = props;\n\n  const [totalAmountBulk, setTotalBulkAmount] = useState(totalDailyAmount * numDays);\n  const [boneAmountBulk, setBoneBulkAmount] = useState(boneAmount * numDays);\n  const [otherAmountsBulk, setOtherBulkAmount] = useState(getBulkOther(otherAmounts, numDays));\n  const [essentialNutrientsBulk, setNutrientBulkAmount] = useState(mapCalculatedNutrients(essentialNutrients, numDays));\n  const [muscleAmountBulk, setMuscleBulkAmount] = useState(muscleAmount * numDays);\n\n  const updateAmounts = (days) => {\n    setOtherBulkAmount(getBulkOther(otherAmounts, days));\n    setNutrientBulkAmount(mapCalculatedNutrients(essentialNutrients, days));\n    setTotalBulkAmount(totalDailyAmount * days);\n    setBoneBulkAmount(boneAmount * days);\n    setMuscleBulkAmount(muscleAmount * days);\n  };\n\n  useEffect(() => {\n    updateAmounts(numDays);\n  }, [numDays]);\n\n  return (\n    <AmountsTable\n      totalDailyAmount={totalAmountBulk}\n      muscleAmount={muscleAmountBulk}\n      boneAmount={boneAmountBulk}\n      otherAmounts={otherAmountsBulk}\n      unitDetails={unitDetails}\n      rmbPercent={rmbPercent}\n      essentialNutrients={essentialNutrientsBulk}\n      lastSavedLifestage={lastSavedLifestage}\n      title={bulkTitle}\n    />\n  );\n};\n\nBulkTable.propTypes = {\n  totalDailyAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  numDays: PropTypes.number.isRequired,\n  essentialNutrients: PropTypes.object.isRequired,\n  lastSavedLifestage: PropTypes.string.isRequired,\n  bulkTitle: PropTypes.string.isRequired,\n};\n\nexport default BulkTable;\n","const validateInteger = (value) => {\n  const parsed = parseInt(value);\n  return isNaN(parsed) ? 0 : parsed;\n};\n\nexport default validateInteger;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { Button, TextField, InputAdornment, makeStyles } from '@material-ui/core';\nimport { Translate } from 'react-localize-redux';\n\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\n\nimport BulkTable from './BulkTable';\nimport AmountsTable from './AmountsTable';\nimport validateInteger from '../../utils/validateInteger';\n\nconst useStyles = makeStyles((theme) => ({\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n}));\n\nconst WhatToFeed = () => {\n  const classes = useStyles();\n  const {\n    totalDailyAmount, unitDetails, boneAmount, muscleAmount, otherAmounts,\n    rmbPercent, essentialNutrients, lastSavedLifestage,\n  } = useSelector(({ calculator }) => ({\n    totalDailyAmount: calculator.totalDailyAmount,\n    unitDetails: calculator.unitDetails,\n    boneAmount: calculator.boneAmount,\n    muscleAmount: calculator.muscleAmount,\n    otherAmounts: calculator.otherAmounts,\n    rmbPercent: calculator.rmbPercent,\n    essentialNutrients: calculator.essentialNutrients,\n    lastSavedLifestage: calculator.lastSavedLifestage,\n  }), shallowEqual);\n\n  const [shouldShowBulkTable, setShowBulkTable] = useState(false);\n  const [numDays, setNumDays] = useState(7);\n\n  useEffect(() => {\n    setShowBulkTable(false);\n  }, [totalDailyAmount, boneAmount, otherAmounts]);\n\n  const amountsTableProps = {\n    totalDailyAmount: totalDailyAmount,\n    muscleAmount: muscleAmount,\n    boneAmount: boneAmount,\n    rmbPercent: rmbPercent,\n    otherAmounts: otherAmounts,\n    unitDetails: unitDetails,\n    essentialNutrients: essentialNutrients,\n    lastSavedLifestage: lastSavedLifestage,\n  };\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <React.Fragment>\n          <AmountsTable\n            {...amountsTableProps}\n            title={translate('whatToFeed.what-to-feed-each-day')}\n          />\n          <div className={classes.bulkTable}>\n            <Section>\n              <Header2>{translate('whatToFeed.bulk-helper')}</Header2>\n              <div>\n                <TextField\n                  className={classes.numericLarge}\n                  id=\"numDays\"\n                  label={translate('whatToFeed.how-long')}\n                  value={numDays}\n                  type=\"number\"\n                  onChange={e => setNumDays(e.target.value)}\n                  onFocus={(event) => event.target.select()}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">{translate('whatToFeed.days')}</InputAdornment>\n                    ),\n                  }}\n                  helperText={translate('whatToFeed.minimum-of-2-days')}\n                />\n                <Button\n                  data-testid=\"showBulkTableButton\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={() => setShowBulkTable(true)}\n                >\n                  {translate('whatToFeed.generate')}\n                </Button>\n              </div>\n            </Section>\n            {shouldShowBulkTable && (numDays > 1) &&\n              <BulkTable\n                {...amountsTableProps}\n                numDays={validateInteger(numDays)}\n                bulkTitle={translate('whatToFeed.bulk-title', {\n                  numDays\n                })}\n              />\n            }\n          </div>\n        </React.Fragment>\n      )}\n    </Translate>\n  );\n};\n\nexport default WhatToFeed;\n","import React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\nimport { updateRMB, updateCustomRMB } from '../../actions/calculator';\nimport rmbOptions from '../../constants/rawMeatyBoneOptions';\nimport validateInteger from '../../utils/validateInteger';\nimport { Translate } from 'react-localize-redux';\n\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  rmbOption: {\n    margin: theme.spacing(1),\n    width: 115,\n  },\n  rmbCustom: {\n    margin: theme.spacing(1),\n    width: 135,\n  },\n}));\n\nconst RawMeatyBone = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const {\n    rmbPercent, rmbKey, isCustomRmb,\n  } = useSelector(({ calculator }) => ({\n    rmbPercent: calculator.rmbPercent,\n    rmbKey: calculator.rmbKey,\n    isCustomRmb: calculator.isCustomRmb,\n  }), shallowEqual);\n\n  const onDropDownChange = (e) => {\n    const dropdownValue = e.target.value;\n    dispatch(updateRMB(dropdownValue, dropdownValue === 'custom'));\n  };\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <Section>\n          <Header2>{translate('rmb.raw-meaty-bone')}</Header2>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"boneType\">{translate('rmb.rmb-type')}</InputLabel>\n            <NativeSelect\n              tabIndex=\"20\"\n              name=\"boneType\"\n              data-testid=\"boneType\"\n              id=\"boneType\"\n              onChange={onDropDownChange}\n              value={rmbKey}\n            >\n              {rmbOptions.map(option => (\n                <option key={option.key} value={option.key}>{translate(`rmb.${option.key}`)}</option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n          {!isCustomRmb &&\n            <TextField\n              className={classes.rmbOption}\n              data-testid=\"rmbOption\"\n              id=\"rmbOption\"\n              label={translate('rmb.bone-content')}\n              value={rmbPercent}\n              disabled\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">%</InputAdornment>\n                ),\n              }}\n            />\n          }\n          {isCustomRmb &&\n            <TextField\n              value={rmbPercent}\n              className={classes.rmbCustom}\n              helperText={translate('rmb.must-be-a-number')}\n              id=\"customRMB\"\n              data-testid=\"customRMB\"\n              label={translate('rmb.enter-rmb-percent')}\n              type=\"number\"\n              onFocus={(event) => event.target.select()}\n              onChange={(e) => dispatch(updateCustomRMB(validateInteger(e.target.value)))}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">%</InputAdornment>\n                ),\n              }}\n            />\n          }\n        </Section>\n      )}\n    </Translate>\n  );\n};\n\nexport default RawMeatyBone;\n","const validateFloat = (value) => {\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? 0 : parsed;\n};\n\nexport default validateFloat;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, FormLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\nimport { Translate } from 'react-localize-redux';\n\nimport round from '../../calculations/round';\nimport unitOptions from '../../constants/unitOptions';\nimport { updateOptions } from '../../actions/calculator';\nimport validateFloat from '../../utils/validateFloat';\n\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n  formLabel: {\n    fontSize: 14,\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst kgPerLb = 0.453592;\n\nconst BasicOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const {\n    weight, unitDetails, maintenance, totalDailyAmount, estimatedCalories,\n  } = useSelector(({ calculator }) => ({\n    weight: calculator.weight,\n    unitDetails: calculator.unitDetails,\n    maintenance: calculator.maintenance,\n    totalDailyAmount: calculator.totalDailyAmount,\n    estimatedCalories: calculator.estimatedCalories,\n  }), shallowEqual);\n\n  const [roundedDailyAmount, setRoundedDailyAmount] = useState(round(totalDailyAmount));\n  const [roundedCalories, setRoundedCalories] = useState(round(estimatedCalories));\n\n  useEffect(() => {\n    // can limit how often the round function is called by\n    // only invoking it when the totalDailyAmount is updated\n    setRoundedDailyAmount(round(totalDailyAmount));\n    setRoundedCalories(round(estimatedCalories));\n  }, [totalDailyAmount, estimatedCalories]);\n\n  const updateUnitDetails = (e) => {\n    const unitName = e.target.value;\n\n    if (unitName === unitDetails.name) {\n      return dispatch(updateOptions(weight, maintenance, unitName));\n    }\n\n    if (unitName === 'metric') {\n      // convert weight to kg when changing to metric\n      const weightInKgs = round(weight * kgPerLb, 1);\n      return dispatch(updateOptions(weightInKgs, maintenance, unitName));\n    }\n\n    if (unitName === 'english') {\n      // convert weight to lbs when changing to english\n      const weightInLbs = round(weight / kgPerLb, 1);\n      return dispatch(updateOptions(weightInLbs, maintenance, unitName));\n    }\n  };\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <Section>\n          <Header2>{translate('basicOptions.options')}</Header2>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"unit\">{translate('basicOptions.unit')}</InputLabel>\n            <NativeSelect\n              tabIndex=\"1\"\n              name=\"unit\"\n              id=\"unit\"\n              data-testid=\"unit\"\n              onChange={updateUnitDetails}\n              value={unitDetails.name}\n            >\n              {unitOptions.map(option => (\n                <option value={option.value} key={option.key}>\n                  {translate(`basicOptions.${option.value}`)}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n          <TextField\n            tabIndex=\"2\"\n            className={classes.numericLarge}\n            id=\"weight\"\n            data-testid=\"weight\"\n            label={translate('basicOptions.dog-weight')}\n            value={weight}\n            type=\"number\"\n            onFocus={(event) => event.target.select()}\n            onChange={(e) => dispatch(updateOptions(validateFloat(e.target.value), maintenance, unitDetails.name))}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">{translate(`units.${unitDetails.lg}`)}</InputAdornment>\n              ),\n            }}\n          />\n          <TextField\n            tabIndex=\"3\"\n            className={classes.numericLarge}\n            id=\"maintenance\"\n            data-testid=\"maintenance\"\n            label={translate('basicOptions.maintenance')}\n            value={maintenance}\n            type=\"number\"\n            onFocus={(event) => event.target.select()}\n            onChange={e => dispatch(updateOptions(weight, validateFloat(e.target.value), unitDetails.name))}\n            helperText={translate('basicOptions.start-at', { percentage: '2%-3%' })}\n            inputProps={{\n              min: 0,\n              max: 100,\n              step: 0.1,\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">%</InputAdornment>\n              ),\n            }}\n          />\n          <TextField\n            className={classes.numericLarge}\n            id=\"totalDailyAmount\"\n            data-testid=\"totalDailyAmount\"\n            label={translate('basicOptions.daily-amount')}\n            value={roundedDailyAmount}\n            type=\"number\"\n            disabled\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">{translate(`units.${unitDetails.sm}`)}</InputAdornment>\n              ),\n            }}\n          />\n          <FormLabel component=\"legend\" classes={{ root: classes.formLabel }}>\n            {translate('basicOptions.estimated-calories')}\n          </FormLabel>\n          <TextField\n            className={classes.numericLarge}\n            id=\"estimatedCalories\"\n            data-testid=\"estimatedCalories\"\n            value={roundedCalories}\n            disabled\n            helperText={translate('basicOptions.used-to-calculate-essential-nutrients')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">{translate('basicOptions.kcal')}</InputAdornment>\n              ),\n            }}\n          />\n        </Section>\n      )}\n    </Translate>\n  );\n};\n\nexport default BasicOptions;\n","import map from 'lodash/map';\nimport React from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Translate } from 'react-localize-redux';\nimport {\n  FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, Button,\n  InputAdornment, TextField, makeStyles\n} from '@material-ui/core';\nimport {\n  updateBonePercentage,\n  updateOtherPercentage,\n  setLifestagePreset,\n  setMealType,\n} from '../../actions/calculator';\nimport { adult, puppy } from '../../constants/lifestage';\nimport validateInteger from '../../utils/validateInteger';\n\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\n\nconst useStyles = makeStyles((theme) => ({\n  numericSmall: {\n    margin: theme.spacing(1),\n    width: 55,\n  },\n  radioWrapper: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  radio: {\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n  },\n  radioLabel: {\n    fontSize: 14,\n    marginRight: theme.spacing(1),\n  },\n  formLabel: {\n    fontSize: 14,\n    marginBottom: theme.spacing(1),\n  },\n  buttonWrapper: {\n    '& > *': {\n      margin: theme.spacing(1),\n      marginRight: theme.spacing(0.5),\n    },\n  },\n}));\n\nconst PercentageOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const {\n    otherPercentages, musclePercentage, bonePercentage, lifestagePreset, mealType,\n  } = useSelector(({ calculator }) => ({\n    otherPercentages: calculator.otherPercentages,\n    musclePercentage: calculator.musclePercentage,\n    bonePercentage: calculator.bonePercentage,\n    lifestagePreset: calculator.lifestagePreset,\n    mealType: calculator.mealType,\n  }), shallowEqual);\n\n  let otherStartIndex = 10;\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <Section>\n          <Header2>{translate('percentageOptions.percentages')}</Header2>\n          <div className={classes.radioWrapper}>\n            <FormControl component=\"fieldset\" margin=\"none\" variant=\"outlined\">\n              <FormLabel component=\"legend\" classes={{ root: classes.formLabel }}>{translate('percentageOptions.meal-type')}</FormLabel>\n              <RadioGroup\n                data-testid=\"mealTypeRadioGroup\"\n                value={mealType} aria-label={mealType} name=\"mealType-radios\"\n                onChange={(e) => dispatch(setMealType(e.target.value))}\n                row\n              >\n                <FormControlLabel\n                  data-testid=\"mealTypeBarf\"\n                  label={translate('percentageOptions.BARF')}\n                  value=\"barf\"\n                  control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n                  classes={{ label: classes.radioLabel }}\n                  tabIndex=\"4\"\n                />\n                <FormControlLabel\n                  data-testid=\"mealTypePmr\"\n                  value=\"pmr\"\n                  label={translate('percentageOptions.PMR')}\n                  control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n                  classes={{ label: classes.radioLabel }}\n                  tabIndex=\"5\"\n                />\n                <FormControlLabel\n                  data-testid=\"mealTypeTradBarf\"\n                  label={translate('percentageOptions.traditional-BARF')}\n                  value=\"barf-traditional\"\n                  control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n                  classes={{ label: classes.radioLabel }}\n                  tabIndex=\"6\"\n                />\n                <FormControlLabel\n                  data-testid=\"mealTypeTradPmr\"\n                  label={translate('percentageOptions.traditional-PMR')}\n                  value=\"pmr-traditional\"\n                  control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n                  classes={{ label: classes.radioLabel }}\n                  tabIndex=\"7\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </div>\n          <div className={classes.buttonWrapper}>\n            <span>{translate('percentageOptions.lifestage-preset')}</span>\n            <Button\n              data-testid=\"lifestagePresetAdult\"\n              size=\"small\"\n              color=\"secondary\"\n              variant={(lifestagePreset === adult) ? \"contained\" : \"outlined\"}\n              onClick={() => dispatch(setLifestagePreset(adult))}\n              tabIndex=\"8\"\n            >\n              {translate('percentageOptions.adult')}\n            </Button>\n            <Button\n              data-testid=\"lifestagePresetPuppy\"\n              size=\"small\"\n              color=\"secondary\"\n              variant={(lifestagePreset === puppy) ? \"contained\" : \"outlined\"}\n              onClick={() => dispatch(setLifestagePreset(puppy))}\n              tabIndex=\"9\"\n            >\n              {translate('percentageOptions.puppy')}\n            </Button>\n          </div>\n          <TextField\n            className={classes.numericSmall}\n            id=\"musclePercentage\"\n            data-testid=\"musclePercentage\"\n            label={translate('percentageOptions.muscle')}\n            value={musclePercentage}\n            type=\"number\"\n            disabled\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">%</InputAdornment>\n              ),\n            }}\n          />\n          <TextField\n            tabIndex=\"10\"\n            className={classes.numericSmall}\n            id=\"bonePercentage\"\n            data-testid=\"bonePercentage\"\n            label={translate('percentageOptions.bone')}\n            value={bonePercentage}\n            type=\"number\"\n            onChange={e => dispatch(updateBonePercentage(validateInteger(e.target.value)))}\n            onFocus={(event) => event.target.select()}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">%</InputAdornment>\n              ),\n            }}\n          />\n          {map(otherPercentages, (value, key) => {\n            otherStartIndex++;\n            return (\n              <TextField\n                tabIndex={otherStartIndex}\n                className={classes.numericSmall}\n                id={`${key}Percentage`}\n                key={`${key}Percentage`}\n                data-testid={`${key}Percentage`}\n                label={translate(`percentageOptions.${key}`)}\n                value={value}\n                type=\"number\"\n                onChange={e => dispatch(updateOtherPercentage(validateInteger(e.target.value), key))}\n                onFocus={(event) => event.target.select()}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">%</InputAdornment>\n                  ),\n                }}\n              />\n            );\n          })}\n        </Section>\n      )}\n    </Translate>\n  );\n};\n\nexport default PercentageOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeSelect, makeStyles } from '@material-ui/core';\nimport { withLocalize } from 'react-localize-redux';\nimport { saveLanguage } from '../../localStorage/selectedLanguage';\nimport Section from '../layout/Section';\nimport { Translate } from 'react-localize-redux';\n\nconst useStyles = makeStyles((theme) => ({\n  pTag: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  aTag: {\n    color: theme.palette.secondary.dark,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    }\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nconst Contact = ({ languages, activeLanguage, setActiveLanguage }) => {\n  const classes = useStyles();\n\n  const updateLanguage = (languageCode) => {\n    saveLanguage(languageCode);\n    setActiveLanguage(languageCode);\n  };\n\n  return (\n    <Translate>\n      {({ translate }) => (\n        <React.Fragment>\n          <Section>\n            <p className={classes.pTag}>Questions/Suggestions? Email: <a className={classes.aTag} href=\"mailto:rawdogfoodcalculator@gmail.com\">rawdogfoodcalculator@gmail.com</a></p>\n            <p className={classes.pTag}>New to Raw Feeding? Check out <a className={classes.aTag} href=\"https://perfectlyrawsome.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Perfectly Rawsome</a> for help getting started.</p>\n          </Section>\n          <Section>\n            <p className={classes.pTag}>Language / {translate(`languages.language-hebrew`)} / {translate(`languages.language-german`)}</p>\n            <div className={classes.formControl}>\n              <NativeSelect\n                name=\"language\"\n                id=\"language\"\n                data-testid=\"language\"\n                onChange={(e) => updateLanguage(e.target.value)}\n                value={activeLanguage.code}\n              >\n                {languages.map(lang => (\n                  <option value={lang.code} key={lang.code}>\n                    {translate(`languages.${lang.code}`)}\n                  </option>\n                ))}\n              </NativeSelect>\n            </div>\n          </Section>\n        </React.Fragment>\n      )}\n    </Translate>\n  );\n};\n\nContact.propTypes = {\n  languages: PropTypes.array.isRequired,\n  activeLanguage: PropTypes.object,\n  setActiveLanguage: PropTypes.func.isRequired,\n};\n\nContact.defaultProps = {\n  activeLanguage: {\n    name: 'English',\n  },\n};\n\nexport default withLocalize(Contact);\n","export function loadLanguage() {\n  return localStorage.getItem('dogfood_language') || 'en'; // default to english\n}\n\nexport function saveLanguage(str) {\n  localStorage.setItem('dogfood_language', str);\n}\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Translate } from 'react-localize-redux';\n\nimport WhatToFeed from './WhatToFeed';\nimport RawMeatyBone from './RawMeatyBone';\nimport BasicOptions from './BasicOptions';\nimport PercentageOptions from './PercentageOptions';\nimport Header2 from '../layout/Header2';\nimport Section from '../layout/Section';\nimport Contact from '../footer/Contact';\n\nconst Main = () => (\n  <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <Section>\n        <Header2>\n          <Translate id=\"main.header\" />\n        </Header2>\n      </Section>\n      <BasicOptions />\n      <PercentageOptions />\n      <RawMeatyBone />\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <WhatToFeed />\n      <Contact />\n    </Grid>\n  </Grid>\n);\n\nexport default Main;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#4f5b62',\n      main: '#263238',\n      dark: '#000a12',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      light: '#98ee99',\n      main: '#66bb6a',\n      dark: '#338a3e',\n      contrastText: '#212121',\n    },\n  },\n  typography: {\n    h1: {\n      fontWeight: 300,\n    },\n    h2: {\n      fontWeight: 300,\n    },\n    h3: {\n      fontWeight: 300,\n    },\n    h4: {\n      fontWeight: 300,\n    },\n    h5: {\n      fontWeight: 300,\n    },\n    h6: {\n      fontWeight: 300,\n    },\n    subtitle1: {\n      fontWeight: 300,\n    },\n    subtitle2: {\n      fontWeight: 300,\n    },\n    body1: {\n      fontWeight: 300,\n    },\n    body2: {\n      fontWeight: 300,\n    },\n    button: {\n      fontWeight: 300,\n    },\n    caption: {\n      fontWeight: 300,\n    },\n    overline: {\n      fontWeight: 300,\n    },\n  },\n});\n\nexport default theme;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { withLocalize } from 'react-localize-redux';\nimport globalTranslations from '../translations/global.json';\nimport { loadLanguage } from '../localStorage/selectedLanguage';\n\nimport Main from './calculator/Main';\nimport theme from '../theme';\n\nclass App extends React.Component {\n  static propTypes = {\n    initialize: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    props.initialize({\n      languages: [\n        { name: 'English', code: 'en' },\n        { name: 'Hebrew', code: 'he' },\n        { name: 'German', code: 'de' }\n      ],\n      translation: globalTranslations,\n      options: {\n        defaultLanguage: loadLanguage(),\n        renderToStaticMarkup,\n      }\n    });\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container fixed>\n          <Main />\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default withLocalize(App);\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport default function configureStore(preloadedState) {\n  const middleware = [thunkMiddleware];\n\n  if (process.env.NODE_ENV !== 'production') {\n    const createLogger = require('redux-logger').createLogger;\n    middleware.push(createLogger({ collapsed: true }));\n  }\n\n  const store = createStore(rootReducer, preloadedState, applyMiddleware(...middleware));\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { LocalizeProvider } from 'react-localize-redux';\n\nimport configureStore from '../common/configureStore';\nimport App from \"../common/components/App\";\nimport theme from '../common/theme';\n\nconst store = configureStore({});\n\nconst renderApp = () => render(\n  <Provider store={store}>\n    <LocalizeProvider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </LocalizeProvider>\n  </Provider>,\n  document.getElementById(\"app\")\n);\n\nrenderApp();\n"],"sourceRoot":""}