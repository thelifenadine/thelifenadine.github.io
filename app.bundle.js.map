{"version":3,"sources":["webpack:///./src/common/localStorage/calculatorState.js","webpack:///./src/common/actions/calculator.js","webpack:///./src/common/calculations/toPercent.js","webpack:///./src/common/calculations/getTotalDailyAmount.js","webpack:///./src/common/form/percentageDefaultOptions.js","webpack:///./src/common/form/unitOptions.js","webpack:///./src/common/calculations/getMuscleAmount.js","webpack:///./src/common/calculations/getBoneAmount.js","webpack:///./src/common/calculations/getAmountsByPercents.js","webpack:///./src/common/calculations/getAmounts.js","webpack:///./src/common/calculations/getButtonStatuses.js","webpack:///./src/common/calculations/getPresetPercentages.js","webpack:///./src/common/reducers/calculator.js","webpack:///./src/common/reducers/utils/createMappedReducer.js","webpack:///./src/common/reducers/index.js","webpack:///./src/common/components/calculator/Header2.js","webpack:///./src/common/calculations/round.js","webpack:///./src/common/components/calculator/Section.js","webpack:///./src/common/components/calculator/AmountsTable.js","webpack:///./src/common/components/calculator/BulkTable.js","webpack:///./src/common/configureStore.js","webpack:///./src/common/components/calculator/WhatToFeed.js","webpack:///./src/common/form/rawMeatyBoneOptions.js","webpack:///./src/common/components/calculator/RawMeatyBone.js","webpack:///./src/common/components/calculator/BasicOptions.js","webpack:///./src/common/components/calculator/PercentageOptions.js","webpack:///./src/common/components/calculator/DogMealCalculator.js","webpack:///./src/common/theme.js","webpack:///./src/common/components/App.js","webpack:///./src/client/index.js"],"names":["saveState","state","serializedState","JSON","stringify","localStorage","setItem","updateOptions","weight","maintenance","unitName","type","setAge","isPuppy","isAdult","updateRMB","rmbPercent","isCustomRmb","toPercent","number","getTotalDailyAmount","maintenancePercentage","unitAmount","weightByUnit","totalAmountInOunces","percentageDefaults","barf","adult","muscle","bone","other","liver","organ","veggie","seed","fruit","puppy","pmr","fibre","name","value","key","unitData","english","lg","sm","perUnit","metric","getMuscleAmount","total","others","values","reduce","a","b","getMusclePercentage","bonePercentage","otherPercentages","getBoneAmount","amount","bonePercent","totalAmount","percentages","mapValues","getAmounts","totalDailyAmount","updatedBoneAmount","updatedOtherAmounts","getAmountsByPercents","otherAmounts","boneAmount","muscleAmount","getButtonStatuses","mealType","some","getPresetPercentages","age","musclePercentage","createMappedReducer","initialState","handlers","action","handler","getItem","parse","err","loadState","unitDetails","updatedUnitDetails","updatedDailyAmount","updatedState","updatedBonePercentage","updatedProperty","updatedValue","updatedOtherPercentages","combineReducers","calculator","useStyles","makeStyles","theme","h2","fontWeight","margin","spacing","Header2","children","classes","className","propTypes","PropTypes","string","isRequired","round","to","lodashRound","section","backgroundColor","padding","marginTop","Section","props","firstRow","table","borderBottom","paddingLeft","paddingRight","paddingBottom","paddingTop","capitalize","textTransform","AmountsTable","title","createCellContent","smallUnitAmount","getCellContentCreator","Table","TableBody","TableRow","TableCell","align","map","object","getUpdatedOther","numDays","BulkHelper","useState","totalAmountUpdated","setTotalUpdatedAmount","boneAmountUpdated","setBoneUpdatedAmount","otherAmountsUpdated","setOtherUpdatedAmount","muscleAmountUpdated","setMuscleUpdatedAmount","useEffect","preloadedState","middleware","numericLarge","width","bulkTable","marginBottom","WhatToFeed","settings","useSelector","shouldShowBulkTable","setShowBulkTable","setNumDays","Fragment","TextField","id","label","onChange","e","Number","target","InputProps","endAdornment","InputAdornment","position","helperText","Button","size","variant","color","onClick","BulkTable","formControl","rmbOption","rmbCustom","RawMeatyBone","dispatch","useDispatch","FormControl","InputLabel","htmlFor","NativeSelect","ddValue","rmbOptions","option","disabled","BasicOptions","roundedDailyAmount","setRoundedDailyAmount","unitOptions","inputProps","min","max","step","numericSmall","radioWrapper","radio","radioLabel","fontSize","marginRight","formLabel","buttonWrapper","PercentageOptions","component","FormLabel","root","RadioGroup","aria-label","setMealType","row","FormControlLabel","control","Radio","DogMealCalculator","Grid","container","item","xs","md","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","h1","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","App","ThemeProvider","CssBaseline","Container","fixed","store","thunkMiddleware","createStore","rootReducer","applyMiddleware","render","document","getElementById"],"mappings":"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","file":"app.bundle.js","sourcesContent":["export function loadState() {\n  try {\n    const serializedState = localStorage.getItem('dogfood');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport function saveState(state) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('dogfood', serializedState);\n  } catch {\n    // ignore write errors\n  }\n}\n","export const UPDATE_OPTIONS = 'UPDATE_OPTIONS';\nexport const UPDATE_BONE_PERCENTAGE = 'UPDATE_BONE_PERCENTAGE';\nexport const UPDATE_OTHER_PERCENTAGE = 'UPDATE_OTHER_PERCENTAGE';\nexport const RESET_PERCENTAGE_DEFAULTS = 'RESET_PERCENTAGE_DEFAULTS';\nexport const UPDATE_RMB_PERCENT = 'UPDATE_RMB_PERCENT';\nexport const SET_MEAL_TYPE = 'SET_MEAL_TYPE';\nexport const SET_AGE = 'SET_AGE';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// BasicOptions\nexport function updateOptions(weight, maintenance, unitName) {\n  return {\n    type: UPDATE_OPTIONS,\n    weight,\n    maintenance,\n    unitName,\n  };\n}\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PercentageOptions\nexport function setMealType(mealType) {\n  return {\n    type: SET_MEAL_TYPE,\n    mealType,\n  };\n}\n\nexport function setAge({ isPuppy, isAdult }) {\n  return {\n    type: SET_AGE,\n    isPuppy,\n    isAdult,\n  };\n}\n\nexport function updateBonePercentage (updatedBonePercentage)  {\n  return {\n    type: UPDATE_BONE_PERCENTAGE,\n    updatedBonePercentage,\n  };\n}\nexport function updateOtherPercentage(updatedValue, propertyName)  {\n  return {\n    type: UPDATE_OTHER_PERCENTAGE,\n    updatedProperty: propertyName,\n    updatedValue,\n  };\n}\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// RawMeatyBone\nexport function updateRMB(rmbPercent, isCustomRmb) {\n  return {\n    type: UPDATE_RMB_PERCENT,\n    rmbPercent,\n    isCustomRmb,\n  };\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n","const toPercent = number => {\n  return number / 100;\n};\n\nexport default toPercent;\n","import toPercent from './toPercent';\n\nconst getTotalDailyAmount = (weight, maintenancePercentage, unitAmount = 16) => {\n  const weightByUnit = weight * unitAmount;\n  const totalAmountInOunces = weightByUnit * toPercent(maintenancePercentage);\n  return totalAmountInOunces;\n};\n\nexport default getTotalDailyAmount;","export const percentageDefaults = {\n  barf: {\n    adult: {\n      muscle: 70,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        veggie: 7,\n        seed: 2,\n        fruit: 1,\n      },\n    },\n    puppy: {\n      muscle: 58,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        veggie: 7,\n        seed: 3,\n        fruit: 1,\n      },\n    },\n  },\n  pmr: {\n    adult: {\n      muscle: 78,\n      bone: 10,\n      other: {\n        liver: 5,\n        organ: 5,\n        fibre: 2,\n      },\n    },\n    puppy: {\n      muscle: 67,\n      bone: 17,\n      other: {\n        liver: 7,\n        organ: 7,\n        fibre: 2,\n      },\n    },\n  },\n};\n","export default [\n  { name: 'lb / ounce', value: 'english', key: 'english' },\n  { name: 'kg / gram', value: 'metric', key: 'metric' },\n];\n\nexport const unitData = {\n  english: {\n    name: 'english',\n    lg: 'lb',\n    sm: 'oz',\n    perUnit: 16,\n  },\n  metric: {\n    name: 'metric',\n    lg: 'kg',\n    sm: 'g',\n    perUnit: 1000,\n  }\n};\n","import values from 'lodash/values';\n\nconst getMuscleAmount = (total, bone, others) => {\n  const sum = bone + values(others).reduce((a, b) => (a + b), 0);\n  return total - sum;\n};\n\nexport default getMuscleAmount;\n\nexport const getMusclePercentage = (bonePercentage, otherPercentages) => \n  getMuscleAmount(100, bonePercentage, otherPercentages);\n","import toPercent from './toPercent';\n\nconst getBoneAmount = (amount, bonePercent, rmbPercent) => {\n  if (rmbPercent === 0) return 0;\n\n  const newBoneAmount = (amount * toPercent(bonePercent)) / toPercent(rmbPercent);\n  return newBoneAmount;\n};\n\nexport default getBoneAmount;\n","import mapValues from 'lodash/mapValues';\nimport toPercent from './toPercent';\n\nconst getAmountByPercent = (amount, percentAmount) => {\n  return amount * toPercent(percentAmount);\n};\n\nexport default (totalAmount, percentages) => \n  mapValues(percentages, value => getAmountByPercent(totalAmount, value));\n\n","import getMuscleAmount from './getMuscleAmount';\nimport getBoneAmount from './getBoneAmount';\nimport getAmountsByPercents from './getAmountsByPercents';\n\nconst getAmounts = (totalDailyAmount, bonePercentage, rmbPercent, otherPercentages) => {\n  const updatedBoneAmount = getBoneAmount(totalDailyAmount, bonePercentage, rmbPercent);\n  const updatedOtherAmounts = getAmountsByPercents(totalDailyAmount, otherPercentages); \n  const updatedMuscleAmount = getMuscleAmount(totalDailyAmount, updatedBoneAmount, updatedOtherAmounts);\n\n  return {\n    otherAmounts: updatedOtherAmounts,\n    boneAmount: updatedBoneAmount,\n    muscleAmount: updatedMuscleAmount,\n  };\n};\n\nexport default getAmounts;","import some from 'lodash/some';\nimport { percentageDefaults } from '../form/percentageDefaultOptions';\n\n/*\n  This function determines whether the percentages match the default selections for\n  a particular age group, and if so, that button is set to active\n  should extract to a util file?\n*/\nconst getButtonStatuses = (mealType, bonePercentage, otherPercentages, ) => {\n  if (percentageDefaults[mealType]['adult'].bone === bonePercentage) {\n    const isAdultInvalid = some(percentageDefaults[mealType]['adult'].other, (value, key) => {\n      return otherPercentages[key] !== value; // as soon as you find a mismatch return\n    });\n\n    if (!isAdultInvalid) {\n      return {\n        isAdult: true,\n        isPuppy: false,\n      };\n    }\n  }\n\n  if (percentageDefaults[mealType]['puppy'].bone === bonePercentage) {\n    const isPuppyInvalid = some(percentageDefaults[mealType]['puppy'].other, (value, key) => {\n      return otherPercentages[key] !== value; // as soon as you find a mismatch return\n    });\n\n    if (!isPuppyInvalid) {\n      return {\n        isAdult: false,\n        isPuppy: true,\n      };\n    }\n  }\n\n  return {\n    isAdult: false,\n    isPuppy: false,\n  };\n};\n\nexport default getButtonStatuses;\n","import { percentageDefaults } from '../form/percentageDefaultOptions';\nimport getAmounts from './getAmounts';\n\nconst getPresetPercentages = (state, mealType, age) => {\n  const { totalDailyAmount, rmbPercent } = state;\n  const { muscle, bone, other } = percentageDefaults[mealType][age];\n\n  return {\n    otherPercentages: other,\n    bonePercentage: bone,\n    musclePercentage: muscle,\n    ...getAmounts(totalDailyAmount, bone, rmbPercent, other),\n  };\n};\n\nexport default getPresetPercentages;\n","import { loadState, saveState } from '../localStorage/calculatorState';\n\nimport {\n  UPDATE_OPTIONS,\n  UPDATE_BONE_PERCENTAGE,\n  UPDATE_OTHER_PERCENTAGE,\n  UPDATE_RMB_PERCENT,\n  SET_AGE,\n  SET_MEAL_TYPE,\n} from '../actions/calculator';\n\nimport createMappedReducer from './utils/createMappedReducer';\nimport getTotalDailyAmount from '../calculations/getTotalDailyAmount';\nimport { percentageDefaults } from '../form/percentageDefaultOptions';\nimport { unitData } from '../form/unitOptions';\nimport { getMusclePercentage } from '../calculations/getMuscleAmount';\nimport getAmounts from '../calculations/getAmounts';\n\n// these are reducer helpers... should maybe move to a new folder\nimport getButtonStatuses from '../calculations/getButtonStatuses';\nimport getPresetPercentages from '../calculations/getPresetPercentages';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// INITIAL STATE\nconst initialRMB = 44;\nconst weight = 50;\nconst maintenance = 2.5;\nconst initialUnit = 'english';\nconst totalDailyAmount = getTotalDailyAmount(weight, maintenance, initialUnit.perUnit);\nconst { muscle, bone, other } = percentageDefaults['barf']['adult'];\n\nconst initialState = loadState() || {\n  unitDetails: unitData[initialUnit],\n  isAdult: true,\n  isPuppy: false,\n  mealType: 'barf',\n  age: 'adult',\n  weight,\n  maintenance,\n  totalDailyAmount,\n  rmbPercent: initialRMB,\n  isCustomRmb: false,\n  musclePercentage: muscle,\n  bonePercentage: bone,\n  otherPercentages: other,\n  ...getAmounts(totalDailyAmount, bone, initialRMB, other),\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// BasicOptions\nexport const updateOptions = (state, action) => {\n  const { otherPercentages, bonePercentage, rmbPercent, unitDetails } = state;\n  const { weight, maintenance, unitName } = action;\n\n  const updatedUnitDetails = unitName ? unitData[unitName] : { ...unitDetails };\n  const updatedDailyAmount = getTotalDailyAmount(weight, maintenance, updatedUnitDetails.perUnit);\n\n  const updatedState = {\n    ...state,\n    weight,\n    maintenance,\n    unitDetails: updatedUnitDetails,\n    totalDailyAmount: updatedDailyAmount,\n    ...getAmounts(updatedDailyAmount, bonePercentage, rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PercentageOptions\nexport const setAge = (state, { isPuppy, isAdult }) => {\n  const { mealType } = state;\n  const age = isPuppy ? 'puppy' : 'adult';\n\n  const updatedState = {\n    ...state,\n    isPuppy,\n    isAdult,\n    age,\n    ...getPresetPercentages(state, mealType, age),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const setMealType = (state, { mealType }) => {\n  const { age } = state;\n\n  const updatedState = {\n    ...state,\n    isPuppy: (age === 'puppy'),\n    isAdult: (age === 'adult'),\n    mealType,\n    ...getPresetPercentages(state, mealType, age),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const updateOtherPercentages = (state, { updatedProperty, updatedValue }) => {\n  const { totalDailyAmount, otherPercentages, bonePercentage, rmbPercent, mealType } = state;\n\n  const updatedOtherPercentages = {\n    ...otherPercentages,\n    [updatedProperty]: updatedValue,\n  };\n\n  const updatedMusclePercentage = getMusclePercentage(bonePercentage, updatedOtherPercentages);\n\n  const updatedState = {\n    ...state,\n    otherPercentages: updatedOtherPercentages,\n    musclePercentage: updatedMusclePercentage,\n    ...getButtonStatuses(mealType, bonePercentage, updatedOtherPercentages),\n    ...getAmounts(totalDailyAmount, bonePercentage, rmbPercent, updatedOtherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport const updateBonePercentage = (state, action) => {\n  const { totalDailyAmount, otherPercentages, rmbPercent, mealType } = state;\n  const { updatedBonePercentage } = action;\n  const updatedMusclePercentage = getMusclePercentage(updatedBonePercentage, otherPercentages);\n\n  const updatedState = {\n    ...state,\n    bonePercentage: updatedBonePercentage,\n    musclePercentage: updatedMusclePercentage,\n    ...getButtonStatuses(mealType, updatedBonePercentage, otherPercentages),\n    ...getAmounts(totalDailyAmount, updatedBonePercentage, rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// RawMeatyBone\nexport const updateRMB = (state, action) => {\n  const { totalDailyAmount, bonePercentage, otherPercentages } = state;\n\n  const updatedState = {\n    ...state,\n    rmbPercent: action.rmbPercent,\n    isCustomRmb: action.isCustomRmb,\n    ...getAmounts(totalDailyAmount, bonePercentage, action.rmbPercent, otherPercentages),\n  };\n\n  saveState(updatedState);\n  return updatedState;\n};\n\nexport default createMappedReducer(initialState, {\n  [UPDATE_OPTIONS]: updateOptions,\n  [UPDATE_BONE_PERCENTAGE]: updateBonePercentage,\n  [UPDATE_OTHER_PERCENTAGE]: updateOtherPercentages,\n  [UPDATE_RMB_PERCENT]: updateRMB,\n  [SET_AGE]: setAge,\n  [SET_MEAL_TYPE]: setMealType,\n});\n","export default function createMappedReducer(initialState, handlers) {\n  return (state = initialState, action) => {\n    const handler = handlers[action.type];\n\n    if (!handler) {\n      return state;\n    }\n\n    return handler(state, action);\n  };\n}\n","import { combineReducers } from 'redux';\nimport calculator from './calculator';\n\nexport default combineReducers({\n  calculator,\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  h2: {\n    fontWeight: 400,\n    margin: theme.spacing(1),\n  },\n}));\n\nconst Header2 = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <h2 className={classes.h2}>{children}</h2>\n  );\n};\n\nHeader2.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default Header2;\n","import lodashRound from 'lodash/round';\n\n// wrapper for lodash/round that defaults the decimal place to 1\nconst round = (amount, to = 1) => {\n  return lodashRound(amount, to);\n};\n\nexport default round;","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    backgroundColor: 'white',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst Section = props => {\n  const classes = useStyles();\n\n  return (<div className={classes.section} {...props} />);\n};\n\nexport default Section;\n","import map from 'lodash/map';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, Table, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport round from '../../calculations/round';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  firstRow: {\n    fontWeight: 600,\n  },\n  table: {\n    margin: theme.spacing(1),\n    '& > tbody tr td': {\n      borderBottom: '1px solid #eee',\n      paddingLeft: 0,\n      paddingRight: theme.spacing(1),\n      paddingBottom: theme.spacing(.5),\n      paddingTop: theme.spacing(.5),\n    },\n  },\n  capitalize: {\n    textTransform: 'capitalize',\n  },\n}));\n\nconst getCellContentCreator = (unitDetails) => (amount) => {\n  const smallUnitAmount = `${round(amount)} ${unitDetails.sm}`;\n\n  if (amount < unitDetails.perUnit) {\n    return smallUnitAmount;\n  }\n\n  return `${round(amount / unitDetails.perUnit)} ${unitDetails.lg} / ${smallUnitAmount}`;\n};\n\nconst AmountsTable = ({\n  totalAmount,\n  muscleAmount,\n  boneAmount,\n  rmbPercent,\n  otherAmounts,\n  unitDetails,\n  title,\n}) => {\n  const classes = useStyles();\n  const createCellContent = getCellContentCreator(unitDetails);\n  return (\n    <Section>\n      <Header2>{title}</Header2>\n      <Table className={classes.table}>\n        <TableBody>\n          <TableRow>\n            <TableCell className={classes.firstRow}>Total Amount</TableCell>\n            <TableCell className={classes.firstRow} align=\"right\">{createCellContent(totalAmount)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Boneless Meat</TableCell>\n            <TableCell align=\"right\">{createCellContent(muscleAmount)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Raw Meaty Bone at {rmbPercent}%</TableCell>\n            <TableCell align=\"right\">{createCellContent(boneAmount)}</TableCell>\n          </TableRow>\n          {map(otherAmounts, (value, key) => (\n            <TableRow key={key}>\n              <TableCell className={classes.capitalize}>{key}</TableCell>\n              <TableCell align=\"right\">{createCellContent(value)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Section>\n  );\n};\n\nAmountsTable.propTypes = {\n  totalAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default AmountsTable;\n","import mapValues from 'lodash/mapValues';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AmountsTable from './AmountsTable';\n\nconst getUpdatedOther = (otherAmounts, numDays) => mapValues(otherAmounts, value => value * numDays);\n\nconst BulkHelper = (props) => {\n  const {\n    totalDailyAmount,\n    muscleAmount,\n    boneAmount,\n    otherAmounts,\n    unitDetails,\n    rmbPercent,\n    numDays,\n  } = props;\n\n  const [totalAmountUpdated, setTotalUpdatedAmount] = useState(totalDailyAmount * numDays);\n  const [boneAmountUpdated, setBoneUpdatedAmount] = useState(boneAmount * numDays);\n  const [otherAmountsUpdated, setOtherUpdatedAmount] = useState(getUpdatedOther(otherAmounts, numDays));\n  const [muscleAmountUpdated, setMuscleUpdatedAmount] = useState(muscleAmount * numDays);\n\n  useEffect(() => {\n    setOtherUpdatedAmount(getUpdatedOther(otherAmounts, numDays));\n    setTotalUpdatedAmount(totalDailyAmount * numDays);\n    setBoneUpdatedAmount(boneAmount * numDays);\n    setMuscleUpdatedAmount(muscleAmount * numDays);\n  }, [numDays]);\n\n  return (\n    <AmountsTable\n      totalAmount={totalAmountUpdated}\n      muscleAmount={muscleAmountUpdated}\n      boneAmount={boneAmountUpdated}\n      otherAmounts={otherAmountsUpdated}\n      unitDetails={unitDetails}\n      rmbPercent={rmbPercent}\n      title={`Bulk Amounts for ${numDays} days`}\n    />\n  );\n};\n\nBulkHelper.propTypes = {\n  totalDailyAmount: PropTypes.number.isRequired,\n  muscleAmount: PropTypes.number.isRequired,\n  boneAmount: PropTypes.number.isRequired,\n  rmbPercent: PropTypes.number.isRequired,\n  otherAmounts: PropTypes.object.isRequired,\n  unitDetails: PropTypes.object.isRequired,\n  numDays: PropTypes.number.isRequired,\n};\n\nexport default BulkHelper;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport default function configureStore(preloadedState) {\n  const middleware = [thunkMiddleware];\n\n  if (process.env.NODE_ENV !== 'production') {\n    const createLogger = require('redux-logger').createLogger;\n    middleware.push(createLogger({ collapsed: true }));\n  }\n\n  const store = createStore(rootReducer, preloadedState, applyMiddleware(...middleware));\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button, TextField, InputAdornment, makeStyles } from '@material-ui/core';\nimport Header2 from './Header2';\nimport AmountsTable from './AmountsTable';\nimport Section from './Section';\nimport BulkTable from './BulkTable';\n\nconst useStyles = makeStyles((theme) => ({\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n  bulkTable: {\n    marginBottom: 50,\n  }\n}));\n\n\nconst WhatToFeed = () => {\n  const classes = useStyles();\n  const settings = useSelector(state => state.calculator);\n  const { totalDailyAmount, unitDetails, boneAmount, muscleAmount, otherAmounts, rmbPercent } = settings;\n  const [shouldShowBulkTable, setShowBulkTable] = useState(false);\n  const [numDays, setNumDays] = useState(7);\n\n  useEffect(() => {\n    setShowBulkTable(false);\n  }, [totalDailyAmount, boneAmount, otherAmounts]);\n\n  return (\n    <React.Fragment>\n      <AmountsTable\n        totalAmount={totalDailyAmount}\n        muscleAmount={muscleAmount}\n        boneAmount={boneAmount}\n        rmbPercent={rmbPercent}\n        otherAmounts={otherAmounts}\n        unitDetails={unitDetails}\n        title=\"What to feed each day\"\n      />\n      <div className={classes.bulkTable}>\n        <Section>\n          <Header2>Bulk Helper</Header2>\n          <div>\n            <TextField\n              className={classes.numericLarge}\n              id=\"numDays\"\n              label=\"How long\"\n              value={numDays}\n              type=\"number\"\n              onChange={e => setNumDays(Number(e.target.value))}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">days</InputAdornment>\n                ),\n              }}\n              helperText=\"minimum of 2 days\"\n            />\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => setShowBulkTable(true)}\n            >\n              Generate\n            </Button>\n          </div>\n        </Section>\n        {shouldShowBulkTable && (numDays > 1) &&\n          <BulkTable\n            totalDailyAmount={totalDailyAmount}\n            muscleAmount={muscleAmount}\n            boneAmount={boneAmount}\n            rmbPercent={rmbPercent}\n            otherAmounts={otherAmounts}\n            unitDetails={unitDetails}\n            numDays={numDays}\n          />\n        }\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default WhatToFeed;\n","export default [\n  { name: 'Chicken Back (44%)', value: 44, key: 'Chicken-Back' },\n  { name: 'Chicken Breast (20%)', value: 20, key: 'Chicken-Breast' },\n  { name: 'Chicken Drumstick (27%)', value: 27, key: 'Chicken-Drumstick' },\n  { name: 'Chicken Feet (60%)', value: 60, key: 'Chicken-Feet' },\n  { name: 'Chicken Frame (80%)', value: 80, key: 'Chicken-Frame' },\n  { name: 'Chicken Leg Quarter (30%)', value: 30, key: 'Chicken-Leg-Quarter' },\n  { name: 'Chicken Neck with Skin (36%)', value: 36, key: 'Chicken-Neck-with-Skin' },\n  { name: 'Chicken Neck without Skin (50%)', value: 50, key: 'Chicken-Neck-without-Skin' },\n  { name: 'Chicken Thigh (21%)', value: 21, key: 'Chicken-Thigh' },\n  { name: 'Chicken Whole (32%)', value: 32, key: 'Chicken-Whole' },\n  { name: 'Chicken Wings (46%)', value: 46, key: 'Chicken-Wings' },\n  { name: 'Duck Foot (60%)', value: 60, key: 'Duck-Foot' },\n  { name: 'Duck Frame (80%)', value: 80, key: 'Duck-Frame' },\n  { name: 'Duck Neck (50%)', value: 50, key: 'Duck-Neck' },\n  { name: 'Duck Whole (28%)', value: 28, key: 'Duck-Whole' },\n  { name: 'Duck Wing (39%)', value: 39, key: 'Duck-Wing' },\n  { name: 'Pork Feet (30%)', value: 30, key: 'Pork-Feet' },\n  { name: 'Pork Ribs (30%)', value: 30, key: 'Pork-Ribs' },\n  { name: 'Pork Tail (30%)', value: 30, key: 'Pork-Tail' },\n  { name: 'Rabbit Feet (40%)', value: 40, key: 'Rabbit-Feet' },\n  { name: 'Rabbit Heads (75%)', value: 75, key: 'Rabbit-Heads' },\n  { name: 'Rabbit Whole (28%)', value: 28, key: 'Rabbit-Whole' },\n  { name: 'Turkey Neck (45%)', value: 45, key: 'Turkey-Neck' },\n  { name: 'Custom', value: 0, key: 'Custom' },\n];\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\nimport { updateRMB } from '../../actions/calculator';\nimport rmbOptions from '../../form/rawMeatyBoneOptions';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  rmbOption: {\n    margin: theme.spacing(1),\n    width: 115,\n  },\n  rmbCustom: {\n    margin: theme.spacing(1),\n    width: 135,\n  },\n}));\n\nconst RawMeatyBone = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const settings = useSelector(state => state.calculator);\n  const { rmbPercent, isCustomRmb } = settings;\n\n  const onDropDownChange = (e) => {\n    const ddValue = Number(e.target.value);\n    // the \"custom\" dropdown value is 0, so pass true for isCustom\n    dispatch(updateRMB(ddValue, ddValue === 0));\n  };\n\n  return (\n    <Section>\n      <Header2>Raw Meaty Bone</Header2>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"boneType\">RMB Type</InputLabel>\n        <NativeSelect\n          name=\"boneType\"\n          id=\"boneType\"\n          onChange={onDropDownChange}\n          value={isCustomRmb ? 0 : rmbPercent}\n        >\n          {rmbOptions.map(option => (\n            <option key={option.key} value={option.value}>{option.name}</option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n      {!isCustomRmb &&\n        <TextField\n          className={classes.rmbOption}\n          id=\"rmbOption\"\n          label=\"Bone Content\"\n          value={rmbPercent}\n          type=\"number\"\n          disabled\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      }\n      {isCustomRmb &&\n        <TextField\n          className={classes.rmbCustom}\n          id=\"customRMB\"\n          label=\"Enter RMB %\"\n          value={rmbPercent}\n          type=\"number\"\n          onChange={e => dispatch(updateRMB(Number(e.target.value), true))}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      }\n    </Section>\n  );\n};\n\nexport default RawMeatyBone;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl, NativeSelect, InputLabel, InputAdornment, TextField, makeStyles,\n} from '@material-ui/core';\n\nimport round from '../../calculations/round';\nimport unitOptions from '../../form/unitOptions';\n\nimport { updateOptions } from '../../actions/calculator';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  numericLarge: {\n    margin: theme.spacing(1),\n    width: 110,\n  },\n}));\n\nconst BasicOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const settings = useSelector(state => state.calculator);\n  const { totalDailyAmount, weight, unitDetails, maintenance } = settings;\n\n  const [roundedDailyAmount, setRoundedDailyAmount] = useState(round(totalDailyAmount));\n\n  useEffect(() => {\n    setRoundedDailyAmount(round(totalDailyAmount));\n  }, [totalDailyAmount]);\n\n  return (\n    <Section>\n      <Header2>Options</Header2>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"unit\">Unit</InputLabel>\n        <NativeSelect\n          name=\"unit\"\n          id=\"unit\"\n          onChange={e => dispatch(updateOptions(weight, maintenance, e.target.value))}\n          value={unitDetails.name}\n        >\n          {unitOptions.map(option => (\n            <option key={option.key} value={option.value}>{option.name}</option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n      <TextField\n        className={classes.numericLarge}\n        id=\"weight\"\n        label=\"Dog Weight\"\n        value={weight}\n        type=\"number\"\n        onChange={e => dispatch(updateOptions(Number(e.target.value), maintenance))}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">{unitDetails.lg}</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericLarge}\n        id=\"maintenance\"\n        label=\"Maintenance\"\n        value={maintenance}\n        type=\"number\"\n        onChange={e => dispatch(updateOptions(weight, Number(e.target.value)))}\n        helperText=\"Start at 2.0-3.0%\"\n        inputProps={{\n          min: 0,\n          max: 100,\n          step: 0.1,\n        }}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericLarge}\n        id=\"totalDailyAmount\"\n        label=\"Daily Amount\"\n        value={roundedDailyAmount}\n        type=\"number\"\n        disabled\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">{unitDetails.sm}</InputAdornment>\n          ),\n        }}\n      />\n    </Section>\n  );\n};\n\nexport default BasicOptions;\n","import map from 'lodash/map';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, Button,\n  InputAdornment, TextField, makeStyles\n} from '@material-ui/core';\nimport {\n  updateBonePercentage,\n  updateOtherPercentage,\n  setAge,\n  setMealType,\n} from '../../actions/calculator';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst useStyles = makeStyles((theme) => ({\n  numericSmall: {\n    margin: theme.spacing(1),\n    width: 55,\n  },\n  radioWrapper: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  radio: {\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n  },\n  radioLabel: {\n    fontSize: 14,\n    marginRight: theme.spacing(1),\n  },\n  formLabel: {\n    fontSize: 14,\n    marginBottom: theme.spacing(1),\n  },\n  buttonWrapper: {\n    '& > *': {\n      margin: theme.spacing(1),\n      marginRight: theme.spacing(0.5),\n    },\n  },\n}));\n\nconst PercentageOptions = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    otherPercentages, musclePercentage, bonePercentage, isAdult, isPuppy, mealType,\n  } = useSelector(state => state.calculator);\n\n  return (\n    <Section>\n      <Header2>Percentages</Header2>\n      <div className={classes.radioWrapper}>\n        <FormControl component=\"fieldset\" margin=\"none\" variant=\"outlined\">\n          <FormLabel component=\"legend\" classes={{ root: classes.formLabel }}>Meal Type</FormLabel>\n          <RadioGroup\n            value={mealType} aria-label={mealType} name=\"mealType-radios\"\n            onChange={(e) => dispatch(setMealType(e.target.value))}\n            row\n          >\n            <FormControlLabel\n              label=\"BARF\"\n              value=\"barf\"\n              control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n              classes={{ label: classes.radioLabel }}\n            />\n            <FormControlLabel\n              label=\"PMR\"\n              value=\"pmr\"\n              control={<Radio size=\"small\" classes={{ root: classes.radio }} />}\n              classes={{ label: classes.radioLabel }}\n            />\n          </RadioGroup>\n        </FormControl>\n      </div>\n      <div className={classes.buttonWrapper}>\n        <span>Lifestage Preset:</span>\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          variant={isAdult ? \"contained\" : \"outlined\"}\n          onClick={() => dispatch(setAge({ isPuppy: false, isAdult: true }))}\n        >\n          Adult\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          variant={isPuppy ? \"contained\" : \"outlined\"}\n          onClick={() => dispatch(setAge({ isPuppy: true, isAdult: false }))}\n        >\n          Puppy\n        </Button>\n      </div>\n      <TextField\n        className={classes.numericSmall}\n        id=\"musclePercentage\"\n        label=\"Muscle\"\n        value={musclePercentage}\n        type=\"number\"\n        disabled\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        className={classes.numericSmall}\n        id=\"bonePercentage\"\n        label=\"Bone\"\n        value={bonePercentage}\n        type=\"number\"\n        onChange={e => dispatch(updateBonePercentage(Number(e.target.value)))}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">%</InputAdornment>\n          ),\n        }}\n      />\n      {map(otherPercentages, (value, key) => (\n        <TextField\n          className={classes.numericSmall}\n          id={`${key}Percentage`}\n          key={`${key}Percentage`}\n          label={key}\n          value={value}\n          type=\"number\"\n          onChange={e => dispatch(updateOtherPercentage(Number(e.target.value), key))}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">%</InputAdornment>\n            ),\n          }}\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default PercentageOptions;\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport WhatToFeed from './WhatToFeed';\nimport RawMeatyBone from './RawMeatyBone';\nimport BasicOptions from './BasicOptions';\nimport PercentageOptions from './PercentageOptions';\nimport Header2 from './Header2';\nimport Section from './Section';\n\nconst DogMealCalculator = () => (\n  <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <Section>\n        <Header2>Raw Dog Food Calculator - Recipe Helper</Header2>\n      </Section>\n      <BasicOptions />\n      <PercentageOptions />\n      <RawMeatyBone />\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <WhatToFeed />\n    </Grid>\n  </Grid>\n);\n\nexport default DogMealCalculator;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#4f5b62',\n      main: '#263238',\n      dark: '#000a12',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      light: '#98ee99',\n      main: '#66bb6a',\n      dark: '#338a3e',\n      contrastText: '#212121',\n    },\n  },\n  typography: {\n    h1: {\n      fontWeight: 300,\n    },\n    h2: {\n      fontWeight: 300,\n    },\n    h3: {\n      fontWeight: 300,\n    },\n    h4: {\n      fontWeight: 300,\n    },\n    h5: {\n      fontWeight: 300,\n    },\n    h6: {\n      fontWeight: 300,\n    },\n    subtitle1: {\n      fontWeight: 300,\n    },\n    subtitle2: {\n      fontWeight: 300,\n    },\n    body1: {\n      fontWeight: 300,\n    },\n    body2: {\n      fontWeight: 300,\n    },\n    button: {\n      fontWeight: 300,\n    },\n    caption: {\n      fontWeight: 300,\n    },\n    overline: {\n      fontWeight: 300,\n    },\n  },\n});\n\nexport default theme;","import React from \"react\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport DogMealCalculator from './calculator/DogMealCalculator';\nimport theme from '../theme';\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Container fixed>\n      <DogMealCalculator />\n    </Container>\n  </ThemeProvider>\n);\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport configureStore from '../common/configureStore';\nimport App from \"../common/components/App\";\nimport theme from '../common/theme';\n\nconst store = configureStore({});\n\nconst renderApp = () => render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>, \n  document.getElementById(\"app\")\n);\n\nrenderApp();"],"sourceRoot":""}